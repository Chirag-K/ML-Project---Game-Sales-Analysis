{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The purpose of this Kernel is to investigate whether or not an accurate Machine Learning model can be built to forecast \n",
    "# video game sales in units based on the features given in this dataset. This hypothesis is investigated with numerous \n",
    "# supervised ML models.\n",
    "\n",
    "# Ultimately, a decision to forecast only aggregated global sales was made due to the inherently global nature of the \n",
    "# video game industry. Several features were droppped in the process as well due to a huge potential influx of dummy \n",
    "# variables post-feature engneering.\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "from scipy.stats import norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Platform</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>Developer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Wii Sports</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>41.36</td>\n",
       "      <td>28.96</td>\n",
       "      <td>3.77</td>\n",
       "      <td>8.45</td>\n",
       "      <td>82.53</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>322.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Super Mario Bros.</td>\n",
       "      <td>NES</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>Platform</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>29.08</td>\n",
       "      <td>3.58</td>\n",
       "      <td>6.81</td>\n",
       "      <td>0.77</td>\n",
       "      <td>40.24</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mario Kart Wii</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>Racing</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>15.68</td>\n",
       "      <td>12.76</td>\n",
       "      <td>3.79</td>\n",
       "      <td>3.29</td>\n",
       "      <td>35.52</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>8.3</td>\n",
       "      <td>709.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Wii Sports Resort</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>15.61</td>\n",
       "      <td>10.93</td>\n",
       "      <td>3.28</td>\n",
       "      <td>2.95</td>\n",
       "      <td>32.77</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>192.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pokemon Red/Pokemon Blue</td>\n",
       "      <td>GB</td>\n",
       "      <td>1996.0</td>\n",
       "      <td>Role-Playing</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>11.27</td>\n",
       "      <td>8.89</td>\n",
       "      <td>10.22</td>\n",
       "      <td>1.00</td>\n",
       "      <td>31.37</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Name Platform  Year_of_Release         Genre Publisher  \\\n",
       "0                Wii Sports      Wii           2006.0        Sports  Nintendo   \n",
       "1         Super Mario Bros.      NES           1985.0      Platform  Nintendo   \n",
       "2            Mario Kart Wii      Wii           2008.0        Racing  Nintendo   \n",
       "3         Wii Sports Resort      Wii           2009.0        Sports  Nintendo   \n",
       "4  Pokemon Red/Pokemon Blue       GB           1996.0  Role-Playing  Nintendo   \n",
       "\n",
       "   NA_Sales  EU_Sales  JP_Sales  Other_Sales  Global_Sales  Critic_Score  \\\n",
       "0     41.36     28.96      3.77         8.45         82.53     76.000000   \n",
       "1     29.08      3.58      6.81         0.77         40.24     68.967679   \n",
       "2     15.68     12.76      3.79         3.29         35.52     82.000000   \n",
       "3     15.61     10.93      3.28         2.95         32.77     80.000000   \n",
       "4     11.27      8.89     10.22         1.00         31.37     68.967679   \n",
       "\n",
       "   Critic_Count  User_Score  User_Count Developer  \n",
       "0     51.000000         8.0      322.00  Nintendo  \n",
       "1     26.360821         7.2      162.22       NaN  \n",
       "2     73.000000         8.3      709.00  Nintendo  \n",
       "3     73.000000         8.0      192.00  Nintendo  \n",
       "4     26.360821         7.2      162.22       NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"Game_Sales.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16719, 15)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Platform</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>Developer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>16717</td>\n",
       "      <td>16719</td>\n",
       "      <td>16450.000000</td>\n",
       "      <td>16717</td>\n",
       "      <td>16665</td>\n",
       "      <td>16719.000000</td>\n",
       "      <td>16719.000000</td>\n",
       "      <td>16719.000000</td>\n",
       "      <td>16719.000000</td>\n",
       "      <td>16719.000000</td>\n",
       "      <td>16719.000000</td>\n",
       "      <td>16719.000000</td>\n",
       "      <td>16719.000000</td>\n",
       "      <td>16719.000000</td>\n",
       "      <td>10096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>11562</td>\n",
       "      <td>31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12</td>\n",
       "      <td>581</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Need for Speed: Most Wanted</td>\n",
       "      <td>PS2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Action</td>\n",
       "      <td>Electronic Arts</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ubisoft</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>12</td>\n",
       "      <td>2161</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3370</td>\n",
       "      <td>1356</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2006.487356</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.263330</td>\n",
       "      <td>0.145025</td>\n",
       "      <td>0.077602</td>\n",
       "      <td>0.047332</td>\n",
       "      <td>0.533543</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.209486</td>\n",
       "      <td>162.224498</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.878995</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.813514</td>\n",
       "      <td>0.503283</td>\n",
       "      <td>0.308818</td>\n",
       "      <td>0.186710</td>\n",
       "      <td>1.547935</td>\n",
       "      <td>9.723417</td>\n",
       "      <td>13.241001</td>\n",
       "      <td>1.018279</td>\n",
       "      <td>378.165132</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1980.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.060000</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>7.200000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.170000</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.200000</td>\n",
       "      <td>162.220000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.240000</td>\n",
       "      <td>0.110000</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0.470000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>162.220000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.360000</td>\n",
       "      <td>28.960000</td>\n",
       "      <td>10.220000</td>\n",
       "      <td>10.570000</td>\n",
       "      <td>82.530000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>113.000000</td>\n",
       "      <td>9.700000</td>\n",
       "      <td>10665.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Name Platform  Year_of_Release   Genre  \\\n",
       "count                         16717    16719     16450.000000   16717   \n",
       "unique                        11562       31              NaN      12   \n",
       "top     Need for Speed: Most Wanted      PS2              NaN  Action   \n",
       "freq                             12     2161              NaN    3370   \n",
       "mean                            NaN      NaN      2006.487356     NaN   \n",
       "std                             NaN      NaN         5.878995     NaN   \n",
       "min                             NaN      NaN      1980.000000     NaN   \n",
       "25%                             NaN      NaN      2003.000000     NaN   \n",
       "50%                             NaN      NaN      2007.000000     NaN   \n",
       "75%                             NaN      NaN      2010.000000     NaN   \n",
       "max                             NaN      NaN      2020.000000     NaN   \n",
       "\n",
       "              Publisher      NA_Sales      EU_Sales      JP_Sales  \\\n",
       "count             16665  16719.000000  16719.000000  16719.000000   \n",
       "unique              581           NaN           NaN           NaN   \n",
       "top     Electronic Arts           NaN           NaN           NaN   \n",
       "freq               1356           NaN           NaN           NaN   \n",
       "mean                NaN      0.263330      0.145025      0.077602   \n",
       "std                 NaN      0.813514      0.503283      0.308818   \n",
       "min                 NaN      0.000000      0.000000      0.000000   \n",
       "25%                 NaN      0.000000      0.000000      0.000000   \n",
       "50%                 NaN      0.080000      0.020000      0.000000   \n",
       "75%                 NaN      0.240000      0.110000      0.040000   \n",
       "max                 NaN     41.360000     28.960000     10.220000   \n",
       "\n",
       "         Other_Sales  Global_Sales  Critic_Score  Critic_Count    User_Score  \\\n",
       "count   16719.000000  16719.000000  16719.000000  16719.000000  16719.000000   \n",
       "unique           NaN           NaN           NaN           NaN           NaN   \n",
       "top              NaN           NaN           NaN           NaN           NaN   \n",
       "freq             NaN           NaN           NaN           NaN           NaN   \n",
       "mean        0.047332      0.533543     68.967679     26.360821      7.209486   \n",
       "std         0.186710      1.547935      9.723417     13.241001      1.018279   \n",
       "min         0.000000      0.010000     13.000000      3.000000      0.000000   \n",
       "25%         0.000000      0.060000     68.967679     22.000000      7.200000   \n",
       "50%         0.010000      0.170000     68.967679     26.360821      7.200000   \n",
       "75%         0.030000      0.470000     70.000000     26.360821      7.500000   \n",
       "max        10.570000     82.530000     98.000000    113.000000      9.700000   \n",
       "\n",
       "          User_Count Developer  \n",
       "count   16719.000000     10096  \n",
       "unique           NaN      1696  \n",
       "top              NaN   Ubisoft  \n",
       "freq             NaN       204  \n",
       "mean      162.224498       NaN  \n",
       "std       378.165132       NaN  \n",
       "min         4.000000       NaN  \n",
       "25%        30.000000       NaN  \n",
       "50%       162.220000       NaN  \n",
       "75%       162.220000       NaN  \n",
       "max     10665.000000       NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Checking Outliers.....\n",
    "f,(ax1, ax2, ax3, ax4)= plt.subplots(1,4,sharey=True,figsize=(15,3))\n",
    "ax1.scatter(df[\"Critic_Score\"], df[\"Global_Sales\"])\n",
    "ax1.set_title(\"Global_sale vs Critic_Score\")\n",
    "ax2.scatter(df[\"Critic_Count\"], df[\"Global_Sales\"])\n",
    "ax2.set_title(\"Global_sale vs Critic_count\")\n",
    "ax3.scatter(df[\"User_Score\"], df[\"Global_Sales\"])\n",
    "ax3.set_title(\"Global_sale vs User_Score\")\n",
    "ax4.scatter(df[\"User_Count\"], df[\"Global_Sales\"])\n",
    "ax4.set_title('Global_sales vs User_counts')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Removing Outliers.....\n",
    "data = df.drop(df[df['Global_Sales']>30].index)\n",
    "\n",
    "f,(ax1, ax2, ax3, ax4)= plt.subplots(1,4,sharey=True,figsize=(15,3))\n",
    "ax1.scatter(data[\"Critic_Score\"], data[\"Global_Sales\"])\n",
    "ax1.set_title(\"Global_sale vs Critic_Score\")\n",
    "ax2.scatter(data[\"Critic_Count\"], data[\"Global_Sales\"])\n",
    "ax2.set_title(\"Global_sale vs Critic_count\")\n",
    "ax3.scatter(data[\"User_Score\"], data[\"Global_Sales\"])\n",
    "ax3.set_title(\"Global_sale vs User_Score\")\n",
    "ax4.scatter(data[\"User_Count\"], data[\"Global_Sales\"])\n",
    "ax4.set_title('Global_sales vs User_counts')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Platform</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>Developer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>New Super Mario Bros.</td>\n",
       "      <td>DS</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Platform</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>11.28</td>\n",
       "      <td>9.14</td>\n",
       "      <td>6.50</td>\n",
       "      <td>2.88</td>\n",
       "      <td>29.80</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>8.5</td>\n",
       "      <td>431.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Wii Play</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>13.96</td>\n",
       "      <td>9.18</td>\n",
       "      <td>2.93</td>\n",
       "      <td>2.84</td>\n",
       "      <td>28.92</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>6.6</td>\n",
       "      <td>129.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>New Super Mario Bros. Wii</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Platform</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>14.44</td>\n",
       "      <td>6.94</td>\n",
       "      <td>4.70</td>\n",
       "      <td>2.24</td>\n",
       "      <td>28.32</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.4</td>\n",
       "      <td>594.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Duck Hunt</td>\n",
       "      <td>NES</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>Shooter</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>26.93</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.47</td>\n",
       "      <td>28.31</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Nintendogs</td>\n",
       "      <td>DS</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>Simulation</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.05</td>\n",
       "      <td>10.95</td>\n",
       "      <td>1.93</td>\n",
       "      <td>2.74</td>\n",
       "      <td>24.67</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Mario Kart DS</td>\n",
       "      <td>DS</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>Racing</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.71</td>\n",
       "      <td>7.47</td>\n",
       "      <td>4.13</td>\n",
       "      <td>1.90</td>\n",
       "      <td>23.21</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>8.6</td>\n",
       "      <td>464.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Pokemon Gold/Pokemon Silver</td>\n",
       "      <td>GB</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>Role-Playing</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.00</td>\n",
       "      <td>6.18</td>\n",
       "      <td>7.20</td>\n",
       "      <td>0.71</td>\n",
       "      <td>23.10</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Wii Fit</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>8.92</td>\n",
       "      <td>8.03</td>\n",
       "      <td>3.60</td>\n",
       "      <td>2.15</td>\n",
       "      <td>22.70</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>7.7</td>\n",
       "      <td>146.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Kinect Adventures!</td>\n",
       "      <td>X360</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Microsoft Game Studios</td>\n",
       "      <td>15.00</td>\n",
       "      <td>4.89</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.69</td>\n",
       "      <td>21.81</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>6.3</td>\n",
       "      <td>106.00</td>\n",
       "      <td>Good Science Studio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Wii Fit Plus</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.01</td>\n",
       "      <td>8.49</td>\n",
       "      <td>2.53</td>\n",
       "      <td>1.77</td>\n",
       "      <td>21.79</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Grand Theft Auto V</td>\n",
       "      <td>PS3</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>7.02</td>\n",
       "      <td>9.09</td>\n",
       "      <td>0.98</td>\n",
       "      <td>3.96</td>\n",
       "      <td>21.04</td>\n",
       "      <td>97.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>8.2</td>\n",
       "      <td>3994.00</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Grand Theft Auto: San Andreas</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>9.43</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.41</td>\n",
       "      <td>10.57</td>\n",
       "      <td>20.81</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1588.00</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Super Mario World</td>\n",
       "      <td>SNES</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>Platform</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>12.78</td>\n",
       "      <td>3.75</td>\n",
       "      <td>3.54</td>\n",
       "      <td>0.55</td>\n",
       "      <td>20.61</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Brain Age: Train Your Brain in Minutes a Day</td>\n",
       "      <td>DS</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>4.74</td>\n",
       "      <td>9.20</td>\n",
       "      <td>4.16</td>\n",
       "      <td>2.04</td>\n",
       "      <td>20.15</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>7.9</td>\n",
       "      <td>50.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Pokemon Diamond/Pokemon Pearl</td>\n",
       "      <td>DS</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Role-Playing</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>6.38</td>\n",
       "      <td>4.46</td>\n",
       "      <td>6.04</td>\n",
       "      <td>1.36</td>\n",
       "      <td>18.25</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Super Mario Land</td>\n",
       "      <td>GB</td>\n",
       "      <td>1989.0</td>\n",
       "      <td>Platform</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>10.83</td>\n",
       "      <td>2.71</td>\n",
       "      <td>4.18</td>\n",
       "      <td>0.42</td>\n",
       "      <td>18.14</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Super Mario Bros. 3</td>\n",
       "      <td>NES</td>\n",
       "      <td>1988.0</td>\n",
       "      <td>Platform</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.54</td>\n",
       "      <td>3.44</td>\n",
       "      <td>3.84</td>\n",
       "      <td>0.46</td>\n",
       "      <td>17.28</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Grand Theft Auto V</td>\n",
       "      <td>X360</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>9.66</td>\n",
       "      <td>5.14</td>\n",
       "      <td>0.06</td>\n",
       "      <td>1.41</td>\n",
       "      <td>16.27</td>\n",
       "      <td>97.000000</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>8.1</td>\n",
       "      <td>3711.00</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Grand Theft Auto: Vice City</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>8.41</td>\n",
       "      <td>5.49</td>\n",
       "      <td>0.47</td>\n",
       "      <td>1.78</td>\n",
       "      <td>16.15</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>8.7</td>\n",
       "      <td>730.00</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Pokemon Ruby/Pokemon Sapphire</td>\n",
       "      <td>GBA</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>Role-Playing</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>6.06</td>\n",
       "      <td>3.90</td>\n",
       "      <td>5.38</td>\n",
       "      <td>0.50</td>\n",
       "      <td>15.85</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            Name Platform  Year_of_Release  \\\n",
       "0                          New Super Mario Bros.       DS           2006.0   \n",
       "1                                       Wii Play      Wii           2006.0   \n",
       "2                      New Super Mario Bros. Wii      Wii           2009.0   \n",
       "3                                      Duck Hunt      NES           1984.0   \n",
       "4                                     Nintendogs       DS           2005.0   \n",
       "5                                  Mario Kart DS       DS           2005.0   \n",
       "6                    Pokemon Gold/Pokemon Silver       GB           1999.0   \n",
       "7                                        Wii Fit      Wii           2007.0   \n",
       "8                             Kinect Adventures!     X360           2010.0   \n",
       "9                                   Wii Fit Plus      Wii           2009.0   \n",
       "10                            Grand Theft Auto V      PS3           2013.0   \n",
       "11                 Grand Theft Auto: San Andreas      PS2           2004.0   \n",
       "12                             Super Mario World     SNES           1990.0   \n",
       "13  Brain Age: Train Your Brain in Minutes a Day       DS           2005.0   \n",
       "14                 Pokemon Diamond/Pokemon Pearl       DS           2006.0   \n",
       "15                              Super Mario Land       GB           1989.0   \n",
       "16                           Super Mario Bros. 3      NES           1988.0   \n",
       "17                            Grand Theft Auto V     X360           2013.0   \n",
       "18                   Grand Theft Auto: Vice City      PS2           2002.0   \n",
       "19                 Pokemon Ruby/Pokemon Sapphire      GBA           2002.0   \n",
       "\n",
       "           Genre               Publisher  NA_Sales  EU_Sales  JP_Sales  \\\n",
       "0       Platform                Nintendo     11.28      9.14      6.50   \n",
       "1           Misc                Nintendo     13.96      9.18      2.93   \n",
       "2       Platform                Nintendo     14.44      6.94      4.70   \n",
       "3        Shooter                Nintendo     26.93      0.63      0.28   \n",
       "4     Simulation                Nintendo      9.05     10.95      1.93   \n",
       "5         Racing                Nintendo      9.71      7.47      4.13   \n",
       "6   Role-Playing                Nintendo      9.00      6.18      7.20   \n",
       "7         Sports                Nintendo      8.92      8.03      3.60   \n",
       "8           Misc  Microsoft Game Studios     15.00      4.89      0.24   \n",
       "9         Sports                Nintendo      9.01      8.49      2.53   \n",
       "10        Action    Take-Two Interactive      7.02      9.09      0.98   \n",
       "11        Action    Take-Two Interactive      9.43      0.40      0.41   \n",
       "12      Platform                Nintendo     12.78      3.75      3.54   \n",
       "13          Misc                Nintendo      4.74      9.20      4.16   \n",
       "14  Role-Playing                Nintendo      6.38      4.46      6.04   \n",
       "15      Platform                Nintendo     10.83      2.71      4.18   \n",
       "16      Platform                Nintendo      9.54      3.44      3.84   \n",
       "17        Action    Take-Two Interactive      9.66      5.14      0.06   \n",
       "18        Action    Take-Two Interactive      8.41      5.49      0.47   \n",
       "19  Role-Playing                Nintendo      6.06      3.90      5.38   \n",
       "\n",
       "    Other_Sales  Global_Sales  Critic_Score  Critic_Count  User_Score  \\\n",
       "0          2.88         29.80     89.000000     65.000000         8.5   \n",
       "1          2.84         28.92     58.000000     41.000000         6.6   \n",
       "2          2.24         28.32     87.000000     80.000000         8.4   \n",
       "3          0.47         28.31     68.967679     26.360821         7.2   \n",
       "4          2.74         24.67     68.967679     26.360821         7.2   \n",
       "5          1.90         23.21     91.000000     64.000000         8.6   \n",
       "6          0.71         23.10     68.967679     26.360821         7.2   \n",
       "7          2.15         22.70     80.000000     63.000000         7.7   \n",
       "8          1.69         21.81     61.000000     45.000000         6.3   \n",
       "9          1.77         21.79     80.000000     33.000000         7.4   \n",
       "10         3.96         21.04     97.000000     50.000000         8.2   \n",
       "11        10.57         20.81     95.000000     80.000000         9.0   \n",
       "12         0.55         20.61     68.967679     26.360821         7.2   \n",
       "13         2.04         20.15     77.000000     58.000000         7.9   \n",
       "14         1.36         18.25     68.967679     26.360821         7.2   \n",
       "15         0.42         18.14     68.967679     26.360821         7.2   \n",
       "16         0.46         17.28     68.967679     26.360821         7.2   \n",
       "17         1.41         16.27     97.000000     58.000000         8.1   \n",
       "18         1.78         16.15     95.000000     62.000000         8.7   \n",
       "19         0.50         15.85     68.967679     26.360821         7.2   \n",
       "\n",
       "    User_Count            Developer  \n",
       "0       431.00             Nintendo  \n",
       "1       129.00             Nintendo  \n",
       "2       594.00             Nintendo  \n",
       "3       162.22                  NaN  \n",
       "4       162.22                  NaN  \n",
       "5       464.00             Nintendo  \n",
       "6       162.22                  NaN  \n",
       "7       146.00             Nintendo  \n",
       "8       106.00  Good Science Studio  \n",
       "9        52.00             Nintendo  \n",
       "10     3994.00       Rockstar North  \n",
       "11     1588.00       Rockstar North  \n",
       "12      162.22                  NaN  \n",
       "13       50.00             Nintendo  \n",
       "14      162.22                  NaN  \n",
       "15      162.22                  NaN  \n",
       "16      162.22                  NaN  \n",
       "17     3711.00       Rockstar North  \n",
       "18      730.00       Rockstar North  \n",
       "19      162.22                  NaN  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data.reset_index(drop=True)\n",
    "data.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16713, 15)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'mu' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-9-77c361dc744e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;31m#Now plot the distribution\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n\u001b[0m\u001b[0;32m      5\u001b[0m             loc='best')\n\u001b[0;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Frequency'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'mu' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data['Global_Sales'] , fit=norm);\n",
    "\n",
    "#Now plot the distribution\n",
    "plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n",
    "            loc='best')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Global_Sales distribution')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the fitted parameters used by the function & getting the mean and standard deviation\n",
    "(mu, sigma) = norm.fit(data['Global_Sales'])\n",
    "print( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get also the QQ-plot\n",
    "fig = plt.figure()\n",
    "res = stats.probplot(data['Global_Sales'], plot=plt)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "str_list = [] # empty list to contain columns with strings (words)\n",
    "for colname, colvalue in data.iteritems():\n",
    "    if type(colvalue[2]) == str:\n",
    "         str_list.append(colname)\n",
    "str_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get to the numeric columns by inversion            \n",
    "num_list = data.columns.difference(str_list) \n",
    "num_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Dataframe containing only numerical features\n",
    "data_num = data[num_list]\n",
    "data_num.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Finding the Correlation b/w different features \n",
    "f, ax = plt.subplots(figsize=(14, 11))\n",
    "plt.title('Correlation between the Numerical Features of video game')\n",
    "# Draw the heatmap using seaborn\n",
    "sns.heatmap(data_num.astype(float).corr(), linewidths=0.25, vmax=1.0, cmap=\"cubehelix_r\", annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's look at what independent variables we will keep and whether there are N/A values etc.\n",
    "# Let's look at what features have N/A values\n",
    "\n",
    "data_na = data.isnull().sum() \n",
    "data_na"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Platform</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>Developer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>New Super Mario Bros.</td>\n",
       "      <td>DS</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Platform</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>11.28</td>\n",
       "      <td>9.14</td>\n",
       "      <td>6.50</td>\n",
       "      <td>2.88</td>\n",
       "      <td>29.80</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>8.5</td>\n",
       "      <td>431.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Wii Play</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>13.96</td>\n",
       "      <td>9.18</td>\n",
       "      <td>2.93</td>\n",
       "      <td>2.84</td>\n",
       "      <td>28.92</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>6.6</td>\n",
       "      <td>129.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>New Super Mario Bros. Wii</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Platform</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>14.44</td>\n",
       "      <td>6.94</td>\n",
       "      <td>4.70</td>\n",
       "      <td>2.24</td>\n",
       "      <td>28.32</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.4</td>\n",
       "      <td>594.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Duck Hunt</td>\n",
       "      <td>NES</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>Shooter</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>26.93</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.47</td>\n",
       "      <td>28.31</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Nintendogs</td>\n",
       "      <td>DS</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>Simulation</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.05</td>\n",
       "      <td>10.95</td>\n",
       "      <td>1.93</td>\n",
       "      <td>2.74</td>\n",
       "      <td>24.67</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Mario Kart DS</td>\n",
       "      <td>DS</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>Racing</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.71</td>\n",
       "      <td>7.47</td>\n",
       "      <td>4.13</td>\n",
       "      <td>1.90</td>\n",
       "      <td>23.21</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>8.6</td>\n",
       "      <td>464.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Pokemon Gold/Pokemon Silver</td>\n",
       "      <td>GB</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>Role-Playing</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.00</td>\n",
       "      <td>6.18</td>\n",
       "      <td>7.20</td>\n",
       "      <td>0.71</td>\n",
       "      <td>23.10</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>26.360821</td>\n",
       "      <td>7.2</td>\n",
       "      <td>162.22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Wii Fit</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>8.92</td>\n",
       "      <td>8.03</td>\n",
       "      <td>3.60</td>\n",
       "      <td>2.15</td>\n",
       "      <td>22.70</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>7.7</td>\n",
       "      <td>146.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Kinect Adventures!</td>\n",
       "      <td>X360</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Microsoft Game Studios</td>\n",
       "      <td>15.00</td>\n",
       "      <td>4.89</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.69</td>\n",
       "      <td>21.81</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>6.3</td>\n",
       "      <td>106.00</td>\n",
       "      <td>Good Science Studio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Wii Fit Plus</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.01</td>\n",
       "      <td>8.49</td>\n",
       "      <td>2.53</td>\n",
       "      <td>1.77</td>\n",
       "      <td>21.79</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52.00</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Name Platform  Year_of_Release         Genre  \\\n",
       "0        New Super Mario Bros.       DS           2006.0      Platform   \n",
       "1                     Wii Play      Wii           2006.0          Misc   \n",
       "2    New Super Mario Bros. Wii      Wii           2009.0      Platform   \n",
       "3                    Duck Hunt      NES           1984.0       Shooter   \n",
       "4                   Nintendogs       DS           2005.0    Simulation   \n",
       "5                Mario Kart DS       DS           2005.0        Racing   \n",
       "6  Pokemon Gold/Pokemon Silver       GB           1999.0  Role-Playing   \n",
       "7                      Wii Fit      Wii           2007.0        Sports   \n",
       "8           Kinect Adventures!     X360           2010.0          Misc   \n",
       "9                 Wii Fit Plus      Wii           2009.0        Sports   \n",
       "\n",
       "                Publisher  NA_Sales  EU_Sales  JP_Sales  Other_Sales  \\\n",
       "0                Nintendo     11.28      9.14      6.50         2.88   \n",
       "1                Nintendo     13.96      9.18      2.93         2.84   \n",
       "2                Nintendo     14.44      6.94      4.70         2.24   \n",
       "3                Nintendo     26.93      0.63      0.28         0.47   \n",
       "4                Nintendo      9.05     10.95      1.93         2.74   \n",
       "5                Nintendo      9.71      7.47      4.13         1.90   \n",
       "6                Nintendo      9.00      6.18      7.20         0.71   \n",
       "7                Nintendo      8.92      8.03      3.60         2.15   \n",
       "8  Microsoft Game Studios     15.00      4.89      0.24         1.69   \n",
       "9                Nintendo      9.01      8.49      2.53         1.77   \n",
       "\n",
       "   Global_Sales  Critic_Score  Critic_Count  User_Score  User_Count  \\\n",
       "0         29.80     89.000000     65.000000         8.5      431.00   \n",
       "1         28.92     58.000000     41.000000         6.6      129.00   \n",
       "2         28.32     87.000000     80.000000         8.4      594.00   \n",
       "3         28.31     68.967679     26.360821         7.2      162.22   \n",
       "4         24.67     68.967679     26.360821         7.2      162.22   \n",
       "5         23.21     91.000000     64.000000         8.6      464.00   \n",
       "6         23.10     68.967679     26.360821         7.2      162.22   \n",
       "7         22.70     80.000000     63.000000         7.7      146.00   \n",
       "8         21.81     61.000000     45.000000         6.3      106.00   \n",
       "9         21.79     80.000000     33.000000         7.4       52.00   \n",
       "\n",
       "             Developer  \n",
       "0             Nintendo  \n",
       "1             Nintendo  \n",
       "2             Nintendo  \n",
       "3                  NaN  \n",
       "4                  NaN  \n",
       "5             Nintendo  \n",
       "6                  NaN  \n",
       "7             Nintendo  \n",
       "8  Good Science Studio  \n",
       "9             Nintendo  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data == 0] = np.nan\n",
    "data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name                   2\n",
       "Platform               0\n",
       "Year_of_Release      269\n",
       "Genre                  2\n",
       "Publisher             54\n",
       "NA_Sales            4511\n",
       "EU_Sales            5874\n",
       "JP_Sales           10515\n",
       "Other_Sales         6604\n",
       "Global_Sales           0\n",
       "Critic_Score           0\n",
       "Critic_Count           0\n",
       "User_Score             1\n",
       "User_Count             0\n",
       "Developer           6620\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PS2     2161\n",
      "DS      2152\n",
      "PS3     1331\n",
      "Wii     1317\n",
      "X360    1262\n",
      "PSP     1209\n",
      "PS      1197\n",
      "PC       974\n",
      "XB       824\n",
      "GBA      822\n",
      "GC       556\n",
      "3DS      520\n",
      "PSV      432\n",
      "PS4      393\n",
      "N64      319\n",
      "XOne     247\n",
      "SNES     239\n",
      "SAT      173\n",
      "WiiU     147\n",
      "2600     133\n",
      "NES       97\n",
      "GB        96\n",
      "DC        52\n",
      "GEN       29\n",
      "NG        12\n",
      "SCD        6\n",
      "WS         6\n",
      "3DO        3\n",
      "TG16       2\n",
      "PCFX       1\n",
      "GG         1\n",
      "Name: Platform, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(pd.value_counts(data[\"Platform\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PS2     2161\n",
      "PS3     1331\n",
      "Wii     1317\n",
      "X360    1262\n",
      "PSP     1209\n",
      "PC       974\n",
      "3DS      520\n",
      "PS4      393\n",
      "XOne     247\n",
      "Name: Platform, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "data = data[(data['Platform'] == 'PS3') | (data['Platform'] == 'PS4') | (data['Platform'] == 'X360') | \n",
    "            (data['Platform'] == 'XOne') | (data['Platform'] == 'Wii') | (data['Platform'] == 'PS2') | \n",
    "            (data['Platform'] == 'PC') | (data['Platform'] == 'PSP') | (data['Platform'] == '3DS')]\n",
    "\n",
    "print(pd.value_counts(data[\"Platform\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Action          2097\n",
      "Sports          1383\n",
      "Misc             977\n",
      "Role-Playing     866\n",
      "Shooter          857\n",
      "Adventure        759\n",
      "Racing           678\n",
      "Fighting         452\n",
      "Simulation       437\n",
      "Strategy         420\n",
      "Platform         315\n",
      "Puzzle           173\n",
      "Name: Genre, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(pd.value_counts(data[\"Genre\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Action          2097\n",
      "Sports          1383\n",
      "Misc             977\n",
      "Role-Playing     866\n",
      "Shooter          857\n",
      "Adventure        759\n",
      "Racing           678\n",
      "Fighting         452\n",
      "Name: Genre, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "data = data[(data['Genre'] == 'Action') | (data['Genre'] == 'Sports') | (data['Genre'] == 'Misc') | \n",
    "            (data['Genre'] == 'Role-Playing') | (data['Genre'] == 'Shooter') | (data['Genre'] == 'Adventure') | \n",
    "            (data['Genre'] == 'Racing') | (data['Genre'] == 'Fighting')]\n",
    "\n",
    "print(pd.value_counts(data[\"Genre\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8069, 15)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name                  0\n",
       "Platform              0\n",
       "Year_of_Release     137\n",
       "Genre                 0\n",
       "Publisher            11\n",
       "NA_Sales           2251\n",
       "EU_Sales           2704\n",
       "JP_Sales           4927\n",
       "Other_Sales        2492\n",
       "Global_Sales          0\n",
       "Critic_Score          0\n",
       "Critic_Count          0\n",
       "User_Score            0\n",
       "User_Count            0\n",
       "Developer          2461\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Missing Ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>JP_Sales</th>\n",
       "      <td>61.060850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EU_Sales</th>\n",
       "      <td>33.510968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other_Sales</th>\n",
       "      <td>30.883629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Developer</th>\n",
       "      <td>30.499442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NA_Sales</th>\n",
       "      <td>27.896889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year_of_Release</th>\n",
       "      <td>1.697856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Publisher</th>\n",
       "      <td>0.136324</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Missing Ratio\n",
       "JP_Sales             61.060850\n",
       "EU_Sales             33.510968\n",
       "Other_Sales          30.883629\n",
       "Developer            30.499442\n",
       "NA_Sales             27.896889\n",
       "Year_of_Release       1.697856\n",
       "Publisher             0.136324"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Lets see the missing ratios again\n",
    "data_na = (data.isnull().sum() / len(data)) * 100\n",
    "data_na = data_na.drop(data_na[data_na == 0].index).sort_values(ascending=False)[:30]\n",
    "missing_data = pd.DataFrame({'Missing Ratio' :data_na})\n",
    "missing_data.head(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Platform</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>Developer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Wii Play</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>13.96</td>\n",
       "      <td>9.18</td>\n",
       "      <td>2.93</td>\n",
       "      <td>2.84</td>\n",
       "      <td>28.92</td>\n",
       "      <td>58.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>129.0</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Wii Fit</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>8.92</td>\n",
       "      <td>8.03</td>\n",
       "      <td>3.60</td>\n",
       "      <td>2.15</td>\n",
       "      <td>22.70</td>\n",
       "      <td>80.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>146.0</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Kinect Adventures!</td>\n",
       "      <td>X360</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Microsoft Game Studios</td>\n",
       "      <td>15.00</td>\n",
       "      <td>4.89</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.69</td>\n",
       "      <td>21.81</td>\n",
       "      <td>61.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>6.3</td>\n",
       "      <td>106.0</td>\n",
       "      <td>Good Science Studio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Wii Fit Plus</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.01</td>\n",
       "      <td>8.49</td>\n",
       "      <td>2.53</td>\n",
       "      <td>1.77</td>\n",
       "      <td>21.79</td>\n",
       "      <td>80.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52.0</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Grand Theft Auto V</td>\n",
       "      <td>PS3</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>7.02</td>\n",
       "      <td>9.09</td>\n",
       "      <td>0.98</td>\n",
       "      <td>3.96</td>\n",
       "      <td>21.04</td>\n",
       "      <td>97.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>8.2</td>\n",
       "      <td>3994.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Grand Theft Auto: San Andreas</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>9.43</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.41</td>\n",
       "      <td>10.57</td>\n",
       "      <td>20.81</td>\n",
       "      <td>95.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1588.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Grand Theft Auto V</td>\n",
       "      <td>X360</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>9.66</td>\n",
       "      <td>5.14</td>\n",
       "      <td>0.06</td>\n",
       "      <td>1.41</td>\n",
       "      <td>16.27</td>\n",
       "      <td>97.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>8.1</td>\n",
       "      <td>3711.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Grand Theft Auto: Vice City</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>8.41</td>\n",
       "      <td>5.49</td>\n",
       "      <td>0.47</td>\n",
       "      <td>1.78</td>\n",
       "      <td>16.15</td>\n",
       "      <td>95.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>8.7</td>\n",
       "      <td>730.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Gran Turismo 3: A-Spec</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>Racing</td>\n",
       "      <td>Sony Computer Entertainment</td>\n",
       "      <td>6.85</td>\n",
       "      <td>5.09</td>\n",
       "      <td>1.87</td>\n",
       "      <td>1.16</td>\n",
       "      <td>14.98</td>\n",
       "      <td>95.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>8.4</td>\n",
       "      <td>314.0</td>\n",
       "      <td>Polyphony Digital</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Call of Duty: Modern Warfare 3</td>\n",
       "      <td>X360</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Shooter</td>\n",
       "      <td>Activision</td>\n",
       "      <td>9.04</td>\n",
       "      <td>4.24</td>\n",
       "      <td>0.13</td>\n",
       "      <td>1.32</td>\n",
       "      <td>14.73</td>\n",
       "      <td>88.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>8713.0</td>\n",
       "      <td>Infinity Ward, Sledgehammer Games</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Name Platform  Year_of_Release    Genre  \\\n",
       "1                         Wii Play      Wii           2006.0     Misc   \n",
       "7                          Wii Fit      Wii           2007.0   Sports   \n",
       "8               Kinect Adventures!     X360           2010.0     Misc   \n",
       "9                     Wii Fit Plus      Wii           2009.0   Sports   \n",
       "10              Grand Theft Auto V      PS3           2013.0   Action   \n",
       "11   Grand Theft Auto: San Andreas      PS2           2004.0   Action   \n",
       "17              Grand Theft Auto V     X360           2013.0   Action   \n",
       "18     Grand Theft Auto: Vice City      PS2           2002.0   Action   \n",
       "22          Gran Turismo 3: A-Spec      PS2           2001.0   Racing   \n",
       "23  Call of Duty: Modern Warfare 3     X360           2011.0  Shooter   \n",
       "\n",
       "                      Publisher  NA_Sales  EU_Sales  JP_Sales  Other_Sales  \\\n",
       "1                      Nintendo     13.96      9.18      2.93         2.84   \n",
       "7                      Nintendo      8.92      8.03      3.60         2.15   \n",
       "8        Microsoft Game Studios     15.00      4.89      0.24         1.69   \n",
       "9                      Nintendo      9.01      8.49      2.53         1.77   \n",
       "10         Take-Two Interactive      7.02      9.09      0.98         3.96   \n",
       "11         Take-Two Interactive      9.43      0.40      0.41        10.57   \n",
       "17         Take-Two Interactive      9.66      5.14      0.06         1.41   \n",
       "18         Take-Two Interactive      8.41      5.49      0.47         1.78   \n",
       "22  Sony Computer Entertainment      6.85      5.09      1.87         1.16   \n",
       "23                   Activision      9.04      4.24      0.13         1.32   \n",
       "\n",
       "    Global_Sales  Critic_Score  Critic_Count  User_Score  User_Count  \\\n",
       "1          28.92          58.0          41.0         6.6       129.0   \n",
       "7          22.70          80.0          63.0         7.7       146.0   \n",
       "8          21.81          61.0          45.0         6.3       106.0   \n",
       "9          21.79          80.0          33.0         7.4        52.0   \n",
       "10         21.04          97.0          50.0         8.2      3994.0   \n",
       "11         20.81          95.0          80.0         9.0      1588.0   \n",
       "17         16.27          97.0          58.0         8.1      3711.0   \n",
       "18         16.15          95.0          62.0         8.7       730.0   \n",
       "22         14.98          95.0          54.0         8.4       314.0   \n",
       "23         14.73          88.0          81.0         3.4      8713.0   \n",
       "\n",
       "                            Developer  \n",
       "1                            Nintendo  \n",
       "7                            Nintendo  \n",
       "8                 Good Science Studio  \n",
       "9                            Nintendo  \n",
       "10                     Rockstar North  \n",
       "11                     Rockstar North  \n",
       "17                     Rockstar North  \n",
       "18                     Rockstar North  \n",
       "22                  Polyphony Digital  \n",
       "23  Infinity Ward, Sledgehammer Games  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Platform</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>Developer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Wii Play</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>13.96</td>\n",
       "      <td>9.18</td>\n",
       "      <td>2.93</td>\n",
       "      <td>2.84</td>\n",
       "      <td>28.92</td>\n",
       "      <td>58.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>129.0</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Wii Fit</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>8.92</td>\n",
       "      <td>8.03</td>\n",
       "      <td>3.60</td>\n",
       "      <td>2.15</td>\n",
       "      <td>22.70</td>\n",
       "      <td>80.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>146.0</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kinect Adventures!</td>\n",
       "      <td>X360</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Microsoft Game Studios</td>\n",
       "      <td>15.00</td>\n",
       "      <td>4.89</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.69</td>\n",
       "      <td>21.81</td>\n",
       "      <td>61.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>6.3</td>\n",
       "      <td>106.0</td>\n",
       "      <td>Good Science Studio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Wii Fit Plus</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.01</td>\n",
       "      <td>8.49</td>\n",
       "      <td>2.53</td>\n",
       "      <td>1.77</td>\n",
       "      <td>21.79</td>\n",
       "      <td>80.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52.0</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Theft Auto V</td>\n",
       "      <td>PS3</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>7.02</td>\n",
       "      <td>9.09</td>\n",
       "      <td>0.98</td>\n",
       "      <td>3.96</td>\n",
       "      <td>21.04</td>\n",
       "      <td>97.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>8.2</td>\n",
       "      <td>3994.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Grand Theft Auto: San Andreas</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>9.43</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.41</td>\n",
       "      <td>10.57</td>\n",
       "      <td>20.81</td>\n",
       "      <td>95.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1588.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Grand Theft Auto V</td>\n",
       "      <td>X360</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>9.66</td>\n",
       "      <td>5.14</td>\n",
       "      <td>0.06</td>\n",
       "      <td>1.41</td>\n",
       "      <td>16.27</td>\n",
       "      <td>97.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>8.1</td>\n",
       "      <td>3711.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Grand Theft Auto: Vice City</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>8.41</td>\n",
       "      <td>5.49</td>\n",
       "      <td>0.47</td>\n",
       "      <td>1.78</td>\n",
       "      <td>16.15</td>\n",
       "      <td>95.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>8.7</td>\n",
       "      <td>730.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Gran Turismo 3: A-Spec</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>Racing</td>\n",
       "      <td>Sony Computer Entertainment</td>\n",
       "      <td>6.85</td>\n",
       "      <td>5.09</td>\n",
       "      <td>1.87</td>\n",
       "      <td>1.16</td>\n",
       "      <td>14.98</td>\n",
       "      <td>95.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>8.4</td>\n",
       "      <td>314.0</td>\n",
       "      <td>Polyphony Digital</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Call of Duty: Modern Warfare 3</td>\n",
       "      <td>X360</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Shooter</td>\n",
       "      <td>Activision</td>\n",
       "      <td>9.04</td>\n",
       "      <td>4.24</td>\n",
       "      <td>0.13</td>\n",
       "      <td>1.32</td>\n",
       "      <td>14.73</td>\n",
       "      <td>88.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>8713.0</td>\n",
       "      <td>Infinity Ward, Sledgehammer Games</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Name Platform  Year_of_Release    Genre  \\\n",
       "0                        Wii Play      Wii           2006.0     Misc   \n",
       "1                         Wii Fit      Wii           2007.0   Sports   \n",
       "2              Kinect Adventures!     X360           2010.0     Misc   \n",
       "3                    Wii Fit Plus      Wii           2009.0   Sports   \n",
       "4              Grand Theft Auto V      PS3           2013.0   Action   \n",
       "5   Grand Theft Auto: San Andreas      PS2           2004.0   Action   \n",
       "6              Grand Theft Auto V     X360           2013.0   Action   \n",
       "7     Grand Theft Auto: Vice City      PS2           2002.0   Action   \n",
       "8          Gran Turismo 3: A-Spec      PS2           2001.0   Racing   \n",
       "9  Call of Duty: Modern Warfare 3     X360           2011.0  Shooter   \n",
       "\n",
       "                     Publisher  NA_Sales  EU_Sales  JP_Sales  Other_Sales  \\\n",
       "0                     Nintendo     13.96      9.18      2.93         2.84   \n",
       "1                     Nintendo      8.92      8.03      3.60         2.15   \n",
       "2       Microsoft Game Studios     15.00      4.89      0.24         1.69   \n",
       "3                     Nintendo      9.01      8.49      2.53         1.77   \n",
       "4         Take-Two Interactive      7.02      9.09      0.98         3.96   \n",
       "5         Take-Two Interactive      9.43      0.40      0.41        10.57   \n",
       "6         Take-Two Interactive      9.66      5.14      0.06         1.41   \n",
       "7         Take-Two Interactive      8.41      5.49      0.47         1.78   \n",
       "8  Sony Computer Entertainment      6.85      5.09      1.87         1.16   \n",
       "9                   Activision      9.04      4.24      0.13         1.32   \n",
       "\n",
       "   Global_Sales  Critic_Score  Critic_Count  User_Score  User_Count  \\\n",
       "0         28.92          58.0          41.0         6.6       129.0   \n",
       "1         22.70          80.0          63.0         7.7       146.0   \n",
       "2         21.81          61.0          45.0         6.3       106.0   \n",
       "3         21.79          80.0          33.0         7.4        52.0   \n",
       "4         21.04          97.0          50.0         8.2      3994.0   \n",
       "5         20.81          95.0          80.0         9.0      1588.0   \n",
       "6         16.27          97.0          58.0         8.1      3711.0   \n",
       "7         16.15          95.0          62.0         8.7       730.0   \n",
       "8         14.98          95.0          54.0         8.4       314.0   \n",
       "9         14.73          88.0          81.0         3.4      8713.0   \n",
       "\n",
       "                           Developer  \n",
       "0                           Nintendo  \n",
       "1                           Nintendo  \n",
       "2                Good Science Studio  \n",
       "3                           Nintendo  \n",
       "4                     Rockstar North  \n",
       "5                     Rockstar North  \n",
       "6                     Rockstar North  \n",
       "7                     Rockstar North  \n",
       "8                  Polyphony Digital  \n",
       "9  Infinity Ward, Sledgehammer Games  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data.reset_index(drop=True)\n",
    "data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Platform</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>Developer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Wii Play</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>13.96</td>\n",
       "      <td>9.18</td>\n",
       "      <td>2.93</td>\n",
       "      <td>2.84</td>\n",
       "      <td>28.92</td>\n",
       "      <td>58.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>129.0</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Wii Fit</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>8.92</td>\n",
       "      <td>8.03</td>\n",
       "      <td>3.60</td>\n",
       "      <td>2.15</td>\n",
       "      <td>22.70</td>\n",
       "      <td>80.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>146.0</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kinect Adventures!</td>\n",
       "      <td>X360</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>Misc</td>\n",
       "      <td>Microsoft Game Studios</td>\n",
       "      <td>15.00</td>\n",
       "      <td>4.89</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.69</td>\n",
       "      <td>21.81</td>\n",
       "      <td>61.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>6.3</td>\n",
       "      <td>106.0</td>\n",
       "      <td>Good Science Studio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Wii Fit Plus</td>\n",
       "      <td>Wii</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Sports</td>\n",
       "      <td>Nintendo</td>\n",
       "      <td>9.01</td>\n",
       "      <td>8.49</td>\n",
       "      <td>2.53</td>\n",
       "      <td>1.77</td>\n",
       "      <td>21.79</td>\n",
       "      <td>80.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52.0</td>\n",
       "      <td>Nintendo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Grand Theft Auto V</td>\n",
       "      <td>PS3</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>7.02</td>\n",
       "      <td>9.09</td>\n",
       "      <td>0.98</td>\n",
       "      <td>3.96</td>\n",
       "      <td>21.04</td>\n",
       "      <td>97.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>8.2</td>\n",
       "      <td>3994.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Grand Theft Auto: San Andreas</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>9.43</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.41</td>\n",
       "      <td>10.57</td>\n",
       "      <td>20.81</td>\n",
       "      <td>95.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1588.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Grand Theft Auto V</td>\n",
       "      <td>X360</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>9.66</td>\n",
       "      <td>5.14</td>\n",
       "      <td>0.06</td>\n",
       "      <td>1.41</td>\n",
       "      <td>16.27</td>\n",
       "      <td>97.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>8.1</td>\n",
       "      <td>3711.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Grand Theft Auto: Vice City</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>Action</td>\n",
       "      <td>Take-Two Interactive</td>\n",
       "      <td>8.41</td>\n",
       "      <td>5.49</td>\n",
       "      <td>0.47</td>\n",
       "      <td>1.78</td>\n",
       "      <td>16.15</td>\n",
       "      <td>95.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>8.7</td>\n",
       "      <td>730.0</td>\n",
       "      <td>Rockstar North</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Gran Turismo 3: A-Spec</td>\n",
       "      <td>PS2</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>Racing</td>\n",
       "      <td>Sony Computer Entertainment</td>\n",
       "      <td>6.85</td>\n",
       "      <td>5.09</td>\n",
       "      <td>1.87</td>\n",
       "      <td>1.16</td>\n",
       "      <td>14.98</td>\n",
       "      <td>95.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>8.4</td>\n",
       "      <td>314.0</td>\n",
       "      <td>Polyphony Digital</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Call of Duty: Modern Warfare 3</td>\n",
       "      <td>X360</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Shooter</td>\n",
       "      <td>Activision</td>\n",
       "      <td>9.04</td>\n",
       "      <td>4.24</td>\n",
       "      <td>0.13</td>\n",
       "      <td>1.32</td>\n",
       "      <td>14.73</td>\n",
       "      <td>88.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>8713.0</td>\n",
       "      <td>Infinity Ward, Sledgehammer Games</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Name Platform  Year_of_Release    Genre  \\\n",
       "0                        Wii Play      Wii           2006.0     Misc   \n",
       "1                         Wii Fit      Wii           2007.0   Sports   \n",
       "2              Kinect Adventures!     X360           2010.0     Misc   \n",
       "3                    Wii Fit Plus      Wii           2009.0   Sports   \n",
       "4              Grand Theft Auto V      PS3           2013.0   Action   \n",
       "5   Grand Theft Auto: San Andreas      PS2           2004.0   Action   \n",
       "6              Grand Theft Auto V     X360           2013.0   Action   \n",
       "7     Grand Theft Auto: Vice City      PS2           2002.0   Action   \n",
       "8          Gran Turismo 3: A-Spec      PS2           2001.0   Racing   \n",
       "9  Call of Duty: Modern Warfare 3     X360           2011.0  Shooter   \n",
       "\n",
       "                     Publisher  NA_Sales  EU_Sales  JP_Sales  Other_Sales  \\\n",
       "0                     Nintendo     13.96      9.18      2.93         2.84   \n",
       "1                     Nintendo      8.92      8.03      3.60         2.15   \n",
       "2       Microsoft Game Studios     15.00      4.89      0.24         1.69   \n",
       "3                     Nintendo      9.01      8.49      2.53         1.77   \n",
       "4         Take-Two Interactive      7.02      9.09      0.98         3.96   \n",
       "5         Take-Two Interactive      9.43      0.40      0.41        10.57   \n",
       "6         Take-Two Interactive      9.66      5.14      0.06         1.41   \n",
       "7         Take-Two Interactive      8.41      5.49      0.47         1.78   \n",
       "8  Sony Computer Entertainment      6.85      5.09      1.87         1.16   \n",
       "9                   Activision      9.04      4.24      0.13         1.32   \n",
       "\n",
       "   Global_Sales  Critic_Score  Critic_Count  User_Score  User_Count  \\\n",
       "0         28.92          58.0          41.0         6.6       129.0   \n",
       "1         22.70          80.0          63.0         7.7       146.0   \n",
       "2         21.81          61.0          45.0         6.3       106.0   \n",
       "3         21.79          80.0          33.0         7.4        52.0   \n",
       "4         21.04          97.0          50.0         8.2      3994.0   \n",
       "5         20.81          95.0          80.0         9.0      1588.0   \n",
       "6         16.27          97.0          58.0         8.1      3711.0   \n",
       "7         16.15          95.0          62.0         8.7       730.0   \n",
       "8         14.98          95.0          54.0         8.4       314.0   \n",
       "9         14.73          88.0          81.0         3.4      8713.0   \n",
       "\n",
       "                           Developer  \n",
       "0                           Nintendo  \n",
       "1                           Nintendo  \n",
       "2                Good Science Studio  \n",
       "3                           Nintendo  \n",
       "4                     Rockstar North  \n",
       "5                     Rockstar North  \n",
       "6                     Rockstar North  \n",
       "7                     Rockstar North  \n",
       "8                  Polyphony Digital  \n",
       "9  Infinity Ward, Sledgehammer Games  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data1 = data.copy()\n",
    "data1.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5818"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list1 = []\n",
    "for row in range(len(data1)):\n",
    "    if np.isnan(data1['NA_Sales'][row]) == False :\n",
    "         list1.append(row)\n",
    "len(list1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Acer\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # Remove the CWD from sys.path while we load stuff.\n",
      "C:\\Users\\Acer\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n",
      "C:\\Users\\Acer\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  del sys.path[0]\n",
      "C:\\Users\\Acer\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n"
     ]
    }
   ],
   "source": [
    "# Filling the missing data\n",
    "for row in range(len(data1)):\n",
    "    if np.isnan(data1['NA_Sales'][row]) and np.isnan(data1['EU_Sales'][row]) == False and np.isnan(data1['JP_Sales'][row]) == False and np.isnan(data1['Other_Sales'][row]) == False :\n",
    "        data1['NA_Sales'][row] = data1['Global_Sales'][row] - data1['EU_Sales'][row] + data1['JP_Sales'][row] + data1['Other_Sales'][row]\n",
    "        \n",
    "    elif np.isnan(data1['EU_Sales'][row]) and np.isnan(data1['NA_Sales'][row]) == False and np.isnan(data1['JP_Sales'][row]) == False and np.isnan(data1['Other_Sales'][row]) == False :\n",
    "        data1['EU_Sales'][row] = data1['Global_Sales'][row] - data1['NA_Sales'][row] + data1['JP_Sales'][row] + data1['Other_Sales'][row]\n",
    "        \n",
    "    elif np.isnan(data1['JP_Sales'][row]) and np.isnan(data1['EU_Sales'][row]) == False and np.isnan(data1['NA_Sales'][row]) == False and np.isnan(data1['Other_Sales'][row]) == False :\n",
    "        data1['JP_Sales'][row] = data1['Global_Sales'][row] - data1['EU_Sales'][row] + data1['NA_Sales'][row] + data1['Other_Sales'][row]\n",
    "        \n",
    "    elif np.isnan(data1['Other_Sales'][row]) and np.isnan(data1['EU_Sales'][row]) == False and np.isnan(data1['JP_Sales'][row]) == False and np.isnan(data1['NA_Sales'][row]) == False :\n",
    "        data1['Other_Sales'][row] = data1['Global_Sales'][row] - data1['EU_Sales'][row] + data1['JP_Sales'][row] + data1['NA_Sales'][row]\n",
    "        \n",
    "    elif np.isnan(data1['NA_Sales'][row]) == False and np.isnan(data1['EU_Sales'][row]) == False and np.isnan(data1['JP_Sales'][row]) == False and np.isnan(data1['Other_Sales'][row]) == False :\n",
    "        continue\n",
    "        \n",
    "    else :\n",
    "        data1.drop([row])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name                  0\n",
       "Platform              0\n",
       "Year_of_Release     137\n",
       "Genre                 0\n",
       "Publisher            11\n",
       "NA_Sales           2221\n",
       "EU_Sales           2592\n",
       "JP_Sales           1843\n",
       "Other_Sales        2478\n",
       "Global_Sales          0\n",
       "Critic_Score          0\n",
       "Critic_Count          0\n",
       "User_Score            0\n",
       "User_Count            0\n",
       "Developer          2461\n",
       "dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Lets see the missing ratios again\n",
    "data1.isnull().sum()\n",
    "# data1.drop(data_na[data_na == 0].index).sort_values(ascending=False)[:30]\n",
    "# missing_data = pd.DataFrame({'Missing Ratio' :data_na})\n",
    "# missing_data.head(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Name', 'Platform', 'Genre', 'Publisher', 'Developer']"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str_list = [] # empty list to contain columns with strings (words)\n",
    "for colname, colvalue in data.iteritems():\n",
    "    if type(colvalue[7]) == str:\n",
    "         str_list.append(colname)\n",
    "str_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Critic_Count', 'Critic_Score', 'EU_Sales', 'Global_Sales', 'JP_Sales',\n",
       "       'NA_Sales', 'Other_Sales', 'User_Count', 'User_Score',\n",
       "       'Year_of_Release'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_num_list = data1.columns.difference(str_list) \n",
    "data_num_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>Year_of_Release</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>41.000000</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>9.18</td>\n",
       "      <td>28.92</td>\n",
       "      <td>2.93</td>\n",
       "      <td>13.96</td>\n",
       "      <td>2.84</td>\n",
       "      <td>129.00</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2006.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>63.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.03</td>\n",
       "      <td>22.70</td>\n",
       "      <td>3.60</td>\n",
       "      <td>8.92</td>\n",
       "      <td>2.15</td>\n",
       "      <td>146.00</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2007.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>4.89</td>\n",
       "      <td>21.81</td>\n",
       "      <td>0.24</td>\n",
       "      <td>15.00</td>\n",
       "      <td>1.69</td>\n",
       "      <td>106.00</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2010.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.49</td>\n",
       "      <td>21.79</td>\n",
       "      <td>2.53</td>\n",
       "      <td>9.01</td>\n",
       "      <td>1.77</td>\n",
       "      <td>52.00</td>\n",
       "      <td>7.4</td>\n",
       "      <td>2009.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>97.000000</td>\n",
       "      <td>9.09</td>\n",
       "      <td>21.04</td>\n",
       "      <td>0.98</td>\n",
       "      <td>7.02</td>\n",
       "      <td>3.96</td>\n",
       "      <td>3994.00</td>\n",
       "      <td>8.2</td>\n",
       "      <td>2013.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8064</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2007.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8065</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.00</td>\n",
       "      <td>5.8</td>\n",
       "      <td>2009.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8066</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2008.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8067</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2016.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8068</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2006.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8069 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Critic_Count  Critic_Score  EU_Sales  Global_Sales  JP_Sales  NA_Sales  \\\n",
       "0        41.000000     58.000000      9.18         28.92      2.93     13.96   \n",
       "1        63.000000     80.000000      8.03         22.70      3.60      8.92   \n",
       "2        45.000000     61.000000      4.89         21.81      0.24     15.00   \n",
       "3        33.000000     80.000000      8.49         21.79      2.53      9.01   \n",
       "4        50.000000     97.000000      9.09         21.04      0.98      7.02   \n",
       "...            ...           ...       ...           ...       ...       ...   \n",
       "8064     26.360821     68.967679       NaN          0.01      0.01       NaN   \n",
       "8065      6.000000     63.000000      0.01          0.01       NaN       NaN   \n",
       "8066     26.360821     68.967679       NaN          0.01       NaN       NaN   \n",
       "8067     26.360821     68.967679       NaN          0.01      0.01       NaN   \n",
       "8068     26.360821     68.967679      0.01          0.01       NaN       NaN   \n",
       "\n",
       "      Other_Sales  User_Count  User_Score  Year_of_Release  \n",
       "0            2.84      129.00         6.6           2006.0  \n",
       "1            2.15      146.00         7.7           2007.0  \n",
       "2            1.69      106.00         6.3           2010.0  \n",
       "3            1.77       52.00         7.4           2009.0  \n",
       "4            3.96     3994.00         8.2           2013.0  \n",
       "...           ...         ...         ...              ...  \n",
       "8064          NaN      162.22         7.2           2007.0  \n",
       "8065          NaN        8.00         5.8           2009.0  \n",
       "8066          NaN      162.22         7.2           2008.0  \n",
       "8067          NaN      162.22         7.2           2016.0  \n",
       "8068          NaN      162.22         7.2           2006.0  \n",
       "\n",
       "[8069 rows x 10 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_num_list = data1[data_num_list]\n",
    "data_num_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  41.   58.    9. ...  129.    7. 2006.]\n",
      " [  63.   80.    8. ...  146.    8. 2007.]\n",
      " [  45.   61.    5. ...  106.    6. 2010.]\n",
      " ...\n",
      " [  26.   69.    0. ...  162.    7. 2008.]\n",
      " [  26.   69.    3. ...  162.    7. 2016.]\n",
      " [  26.   69.    0. ...  162.    7. 2006.]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.experimental import enable_iterative_imputer\n",
    "from sklearn.impute import IterativeImputer\n",
    "imp = IterativeImputer(max_iter=20, random_state=0, skip_complete = True, sample_posterior = True, min_value = 0)\n",
    "Imputed_data = imp.fit_transform(data_num_list)\n",
    "print(np.round(Imputed_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>41.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>9.18</td>\n",
       "      <td>28.92</td>\n",
       "      <td>2.93</td>\n",
       "      <td>13.96</td>\n",
       "      <td>2.84</td>\n",
       "      <td>129.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2006.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>63.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>8.03</td>\n",
       "      <td>22.70</td>\n",
       "      <td>3.60</td>\n",
       "      <td>8.92</td>\n",
       "      <td>2.15</td>\n",
       "      <td>146.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2007.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>4.89</td>\n",
       "      <td>21.81</td>\n",
       "      <td>0.24</td>\n",
       "      <td>15.00</td>\n",
       "      <td>1.69</td>\n",
       "      <td>106.0</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2010.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>8.49</td>\n",
       "      <td>21.79</td>\n",
       "      <td>2.53</td>\n",
       "      <td>9.01</td>\n",
       "      <td>1.77</td>\n",
       "      <td>52.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>2009.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>9.09</td>\n",
       "      <td>21.04</td>\n",
       "      <td>0.98</td>\n",
       "      <td>7.02</td>\n",
       "      <td>3.96</td>\n",
       "      <td>3994.0</td>\n",
       "      <td>8.2</td>\n",
       "      <td>2013.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>80.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>0.40</td>\n",
       "      <td>20.81</td>\n",
       "      <td>0.41</td>\n",
       "      <td>9.43</td>\n",
       "      <td>10.57</td>\n",
       "      <td>1588.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2004.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>58.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>5.14</td>\n",
       "      <td>16.27</td>\n",
       "      <td>0.06</td>\n",
       "      <td>9.66</td>\n",
       "      <td>1.41</td>\n",
       "      <td>3711.0</td>\n",
       "      <td>8.1</td>\n",
       "      <td>2013.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>62.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>5.49</td>\n",
       "      <td>16.15</td>\n",
       "      <td>0.47</td>\n",
       "      <td>8.41</td>\n",
       "      <td>1.78</td>\n",
       "      <td>730.0</td>\n",
       "      <td>8.7</td>\n",
       "      <td>2002.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>54.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>5.09</td>\n",
       "      <td>14.98</td>\n",
       "      <td>1.87</td>\n",
       "      <td>6.85</td>\n",
       "      <td>1.16</td>\n",
       "      <td>314.0</td>\n",
       "      <td>8.4</td>\n",
       "      <td>2001.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>81.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>4.24</td>\n",
       "      <td>14.73</td>\n",
       "      <td>0.13</td>\n",
       "      <td>9.04</td>\n",
       "      <td>1.32</td>\n",
       "      <td>8713.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>2011.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      0     1     2      3     4      5      6       7    8       9\n",
       "0  41.0  58.0  9.18  28.92  2.93  13.96   2.84   129.0  6.6  2006.0\n",
       "1  63.0  80.0  8.03  22.70  3.60   8.92   2.15   146.0  7.7  2007.0\n",
       "2  45.0  61.0  4.89  21.81  0.24  15.00   1.69   106.0  6.3  2010.0\n",
       "3  33.0  80.0  8.49  21.79  2.53   9.01   1.77    52.0  7.4  2009.0\n",
       "4  50.0  97.0  9.09  21.04  0.98   7.02   3.96  3994.0  8.2  2013.0\n",
       "5  80.0  95.0  0.40  20.81  0.41   9.43  10.57  1588.0  9.0  2004.0\n",
       "6  58.0  97.0  5.14  16.27  0.06   9.66   1.41  3711.0  8.1  2013.0\n",
       "7  62.0  95.0  5.49  16.15  0.47   8.41   1.78   730.0  8.7  2002.0\n",
       "8  54.0  95.0  5.09  14.98  1.87   6.85   1.16   314.0  8.4  2001.0\n",
       "9  81.0  88.0  4.24  14.73  0.13   9.04   1.32  8713.0  3.4  2011.0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Y_test after imputation\n",
    "Imputed_dataframe = pd.DataFrame(Imputed_data)\n",
    "Imputed_dataframe.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    0\n",
       "4    0\n",
       "5    0\n",
       "6    0\n",
       "7    0\n",
       "8    0\n",
       "9    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking null values after imputation\n",
    "Imputed_dataframe.isnull().sum() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of negative values \n",
    "np.sum((Imputed_dataframe < 0).values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Critic_Count', 'Critic_Score', 'EU_Sales', 'Global_Sales', 'JP_Sales',\n",
       "       'NA_Sales', 'Other_Sales', 'User_Count', 'User_Score',\n",
       "       'Year_of_Release'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "column_list = data_num_list.columns\n",
    "column_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>Year_of_Release</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>41.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>9.18</td>\n",
       "      <td>28.92</td>\n",
       "      <td>2.93</td>\n",
       "      <td>13.96</td>\n",
       "      <td>2.84</td>\n",
       "      <td>129.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2006.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>63.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>8.03</td>\n",
       "      <td>22.70</td>\n",
       "      <td>3.60</td>\n",
       "      <td>8.92</td>\n",
       "      <td>2.15</td>\n",
       "      <td>146.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2007.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>4.89</td>\n",
       "      <td>21.81</td>\n",
       "      <td>0.24</td>\n",
       "      <td>15.00</td>\n",
       "      <td>1.69</td>\n",
       "      <td>106.0</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2010.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>8.49</td>\n",
       "      <td>21.79</td>\n",
       "      <td>2.53</td>\n",
       "      <td>9.01</td>\n",
       "      <td>1.77</td>\n",
       "      <td>52.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>2009.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>9.09</td>\n",
       "      <td>21.04</td>\n",
       "      <td>0.98</td>\n",
       "      <td>7.02</td>\n",
       "      <td>3.96</td>\n",
       "      <td>3994.0</td>\n",
       "      <td>8.2</td>\n",
       "      <td>2013.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Critic_Count  Critic_Score  EU_Sales  Global_Sales  JP_Sales  NA_Sales  \\\n",
       "0          41.0          58.0      9.18         28.92      2.93     13.96   \n",
       "1          63.0          80.0      8.03         22.70      3.60      8.92   \n",
       "2          45.0          61.0      4.89         21.81      0.24     15.00   \n",
       "3          33.0          80.0      8.49         21.79      2.53      9.01   \n",
       "4          50.0          97.0      9.09         21.04      0.98      7.02   \n",
       "\n",
       "   Other_Sales  User_Count  User_Score  Year_of_Release  \n",
       "0         2.84       129.0         6.6           2006.0  \n",
       "1         2.15       146.0         7.7           2007.0  \n",
       "2         1.69       106.0         6.3           2010.0  \n",
       "3         1.77        52.0         7.4           2009.0  \n",
       "4         3.96      3994.0         8.2           2013.0  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Imputed_dataframe.columns = ['Critic_Count', 'Critic_Score', 'EU_Sales', 'Global_Sales', 'JP_Sales',\n",
    "       'NA_Sales', 'Other_Sales', 'User_Count', 'User_Score', 'Year_of_Release']\n",
    "Imputed_dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "Imputed_dataframe['Platform'] = data1['Platform']\n",
    "Imputed_dataframe['Genre'] = data1['Genre']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>Platform</th>\n",
       "      <th>Genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>41.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>9.18</td>\n",
       "      <td>28.92</td>\n",
       "      <td>2.93</td>\n",
       "      <td>13.96</td>\n",
       "      <td>2.84</td>\n",
       "      <td>129.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>Wii</td>\n",
       "      <td>Misc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>63.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>8.03</td>\n",
       "      <td>22.70</td>\n",
       "      <td>3.60</td>\n",
       "      <td>8.92</td>\n",
       "      <td>2.15</td>\n",
       "      <td>146.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>Wii</td>\n",
       "      <td>Sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>4.89</td>\n",
       "      <td>21.81</td>\n",
       "      <td>0.24</td>\n",
       "      <td>15.00</td>\n",
       "      <td>1.69</td>\n",
       "      <td>106.0</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>X360</td>\n",
       "      <td>Misc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>8.49</td>\n",
       "      <td>21.79</td>\n",
       "      <td>2.53</td>\n",
       "      <td>9.01</td>\n",
       "      <td>1.77</td>\n",
       "      <td>52.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>Wii</td>\n",
       "      <td>Sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>9.09</td>\n",
       "      <td>21.04</td>\n",
       "      <td>0.98</td>\n",
       "      <td>7.02</td>\n",
       "      <td>3.96</td>\n",
       "      <td>3994.0</td>\n",
       "      <td>8.2</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>PS3</td>\n",
       "      <td>Action</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Critic_Count  Critic_Score  EU_Sales  Global_Sales  JP_Sales  NA_Sales  \\\n",
       "0          41.0          58.0      9.18         28.92      2.93     13.96   \n",
       "1          63.0          80.0      8.03         22.70      3.60      8.92   \n",
       "2          45.0          61.0      4.89         21.81      0.24     15.00   \n",
       "3          33.0          80.0      8.49         21.79      2.53      9.01   \n",
       "4          50.0          97.0      9.09         21.04      0.98      7.02   \n",
       "\n",
       "   Other_Sales  User_Count  User_Score  Year_of_Release Platform   Genre  \n",
       "0         2.84       129.0         6.6           2006.0      Wii    Misc  \n",
       "1         2.15       146.0         7.7           2007.0      Wii  Sports  \n",
       "2         1.69       106.0         6.3           2010.0     X360    Misc  \n",
       "3         1.77        52.0         7.4           2009.0      Wii  Sports  \n",
       "4         3.96      3994.0         8.2           2013.0      PS3  Action  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Imputed_dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8069, 12)\n",
      "(8069, 27)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.head of       Critic_Count  Critic_Score  EU_Sales  Global_Sales  JP_Sales   NA_Sales  \\\n",
       "0        41.000000     58.000000  9.180000         28.92  2.930000  13.960000   \n",
       "1        63.000000     80.000000  8.030000         22.70  3.600000   8.920000   \n",
       "2        45.000000     61.000000  4.890000         21.81  0.240000  15.000000   \n",
       "3        33.000000     80.000000  8.490000         21.79  2.530000   9.010000   \n",
       "4        50.000000     97.000000  9.090000         21.04  0.980000   7.020000   \n",
       "...            ...           ...       ...           ...       ...        ...   \n",
       "8064     26.360821     68.967679  1.559814          0.01  0.010000   0.000000   \n",
       "8065      6.000000     63.000000  0.010000          0.01  4.660902   0.000000   \n",
       "8066     26.360821     68.967679  0.000000          0.01  1.923000   1.906700   \n",
       "8067     26.360821     68.967679  3.483549          0.01  0.010000   0.000000   \n",
       "8068     26.360821     68.967679  0.010000          0.01  3.266886   0.855346   \n",
       "\n",
       "      Other_Sales  User_Count  User_Score  Year_of_Release  ...  \\\n",
       "0        2.840000      129.00         6.6           2006.0  ...   \n",
       "1        2.150000      146.00         7.7           2007.0  ...   \n",
       "2        1.690000      106.00         6.3           2010.0  ...   \n",
       "3        1.770000       52.00         7.4           2009.0  ...   \n",
       "4        3.960000     3994.00         8.2           2013.0  ...   \n",
       "...           ...         ...         ...              ...  ...   \n",
       "8064     0.000000      162.22         7.2           2007.0  ...   \n",
       "8065     0.395562        8.00         5.8           2009.0  ...   \n",
       "8066     0.000000      162.22         7.2           2008.0  ...   \n",
       "8067     0.000000      162.22         7.2           2016.0  ...   \n",
       "8068     0.000000      162.22         7.2           2006.0  ...   \n",
       "\n",
       "      Platform_X360  Platform_XOne  Genre_Action  Genre_Adventure  \\\n",
       "0                 0              0             0                0   \n",
       "1                 0              0             0                0   \n",
       "2                 1              0             0                0   \n",
       "3                 0              0             0                0   \n",
       "4                 0              0             1                0   \n",
       "...             ...            ...           ...              ...   \n",
       "8064              0              0             0                0   \n",
       "8065              0              0             0                1   \n",
       "8066              0              0             0                0   \n",
       "8067              0              0             1                0   \n",
       "8068              1              0             0                0   \n",
       "\n",
       "      Genre_Fighting  Genre_Misc  Genre_Racing  Genre_Role-Playing  \\\n",
       "0                  0           1             0                   0   \n",
       "1                  0           0             0                   0   \n",
       "2                  0           1             0                   0   \n",
       "3                  0           0             0                   0   \n",
       "4                  0           0             0                   0   \n",
       "...              ...         ...           ...                 ...   \n",
       "8064               0           0             0                   1   \n",
       "8065               0           0             0                   0   \n",
       "8066               0           0             1                   0   \n",
       "8067               0           0             0                   0   \n",
       "8068               0           0             0                   0   \n",
       "\n",
       "      Genre_Shooter  Genre_Sports  \n",
       "0                 0             0  \n",
       "1                 0             1  \n",
       "2                 0             0  \n",
       "3                 0             1  \n",
       "4                 0             0  \n",
       "...             ...           ...  \n",
       "8064              0             0  \n",
       "8065              0             0  \n",
       "8066              0             0  \n",
       "8067              0             0  \n",
       "8068              0             1  \n",
       "\n",
       "[8069 rows x 27 columns]>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(Imputed_dataframe.shape) #pre-dummies shape\n",
    "final_data = pd.get_dummies(data=Imputed_dataframe, columns=['Platform', 'Genre'])\n",
    "print(final_data.shape) #post-dummies shape\n",
    "final_data.head #Check to verify that dummies are ok"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rounding up the Year_of_Release\n",
    "final_data['Year_of_Release'] = round(final_data['Year_of_Release'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>EU_Sales</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>JP_Sales</th>\n",
       "      <th>NA_Sales</th>\n",
       "      <th>Other_Sales</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>...</th>\n",
       "      <th>Platform_X360</th>\n",
       "      <th>Platform_XOne</th>\n",
       "      <th>Genre_Action</th>\n",
       "      <th>Genre_Adventure</th>\n",
       "      <th>Genre_Fighting</th>\n",
       "      <th>Genre_Misc</th>\n",
       "      <th>Genre_Racing</th>\n",
       "      <th>Genre_Role-Playing</th>\n",
       "      <th>Genre_Shooter</th>\n",
       "      <th>Genre_Sports</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>41.000000</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>9.180000</td>\n",
       "      <td>28.92</td>\n",
       "      <td>2.930000</td>\n",
       "      <td>13.960000</td>\n",
       "      <td>2.840000</td>\n",
       "      <td>129.00</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>63.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.030000</td>\n",
       "      <td>22.70</td>\n",
       "      <td>3.600000</td>\n",
       "      <td>8.920000</td>\n",
       "      <td>2.150000</td>\n",
       "      <td>146.00</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>4.890000</td>\n",
       "      <td>21.81</td>\n",
       "      <td>0.240000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1.690000</td>\n",
       "      <td>106.00</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.490000</td>\n",
       "      <td>21.79</td>\n",
       "      <td>2.530000</td>\n",
       "      <td>9.010000</td>\n",
       "      <td>1.770000</td>\n",
       "      <td>52.00</td>\n",
       "      <td>7.4</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>97.000000</td>\n",
       "      <td>9.090000</td>\n",
       "      <td>21.04</td>\n",
       "      <td>0.980000</td>\n",
       "      <td>7.020000</td>\n",
       "      <td>3.960000</td>\n",
       "      <td>3994.00</td>\n",
       "      <td>8.2</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8064</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>1.559814</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8065</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.01</td>\n",
       "      <td>4.660902</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.395562</td>\n",
       "      <td>8.00</td>\n",
       "      <td>5.8</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8066</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.01</td>\n",
       "      <td>1.923000</td>\n",
       "      <td>1.906700</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8067</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>3.483549</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8068</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.01</td>\n",
       "      <td>3.266886</td>\n",
       "      <td>0.855346</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8069 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Critic_Count  Critic_Score  EU_Sales  Global_Sales  JP_Sales   NA_Sales  \\\n",
       "0        41.000000     58.000000  9.180000         28.92  2.930000  13.960000   \n",
       "1        63.000000     80.000000  8.030000         22.70  3.600000   8.920000   \n",
       "2        45.000000     61.000000  4.890000         21.81  0.240000  15.000000   \n",
       "3        33.000000     80.000000  8.490000         21.79  2.530000   9.010000   \n",
       "4        50.000000     97.000000  9.090000         21.04  0.980000   7.020000   \n",
       "...            ...           ...       ...           ...       ...        ...   \n",
       "8064     26.360821     68.967679  1.559814          0.01  0.010000   0.000000   \n",
       "8065      6.000000     63.000000  0.010000          0.01  4.660902   0.000000   \n",
       "8066     26.360821     68.967679  0.000000          0.01  1.923000   1.906700   \n",
       "8067     26.360821     68.967679  3.483549          0.01  0.010000   0.000000   \n",
       "8068     26.360821     68.967679  0.010000          0.01  3.266886   0.855346   \n",
       "\n",
       "      Other_Sales  User_Count  User_Score  Year_of_Release  ...  \\\n",
       "0        2.840000      129.00         6.6           2006.0  ...   \n",
       "1        2.150000      146.00         7.7           2007.0  ...   \n",
       "2        1.690000      106.00         6.3           2010.0  ...   \n",
       "3        1.770000       52.00         7.4           2009.0  ...   \n",
       "4        3.960000     3994.00         8.2           2013.0  ...   \n",
       "...           ...         ...         ...              ...  ...   \n",
       "8064     0.000000      162.22         7.2           2007.0  ...   \n",
       "8065     0.395562        8.00         5.8           2009.0  ...   \n",
       "8066     0.000000      162.22         7.2           2008.0  ...   \n",
       "8067     0.000000      162.22         7.2           2016.0  ...   \n",
       "8068     0.000000      162.22         7.2           2006.0  ...   \n",
       "\n",
       "      Platform_X360  Platform_XOne  Genre_Action  Genre_Adventure  \\\n",
       "0                 0              0             0                0   \n",
       "1                 0              0             0                0   \n",
       "2                 1              0             0                0   \n",
       "3                 0              0             0                0   \n",
       "4                 0              0             1                0   \n",
       "...             ...            ...           ...              ...   \n",
       "8064              0              0             0                0   \n",
       "8065              0              0             0                1   \n",
       "8066              0              0             0                0   \n",
       "8067              0              0             1                0   \n",
       "8068              1              0             0                0   \n",
       "\n",
       "      Genre_Fighting  Genre_Misc  Genre_Racing  Genre_Role-Playing  \\\n",
       "0                  0           1             0                   0   \n",
       "1                  0           0             0                   0   \n",
       "2                  0           1             0                   0   \n",
       "3                  0           0             0                   0   \n",
       "4                  0           0             0                   0   \n",
       "...              ...         ...           ...                 ...   \n",
       "8064               0           0             0                   1   \n",
       "8065               0           0             0                   0   \n",
       "8066               0           0             1                   0   \n",
       "8067               0           0             0                   0   \n",
       "8068               0           0             0                   0   \n",
       "\n",
       "      Genre_Shooter  Genre_Sports  \n",
       "0                 0             0  \n",
       "1                 0             1  \n",
       "2                 0             0  \n",
       "3                 0             1  \n",
       "4                 0             0  \n",
       "...             ...           ...  \n",
       "8064              0             0  \n",
       "8065              0             0  \n",
       "8066              0             0  \n",
       "8067              0             0  \n",
       "8068              0             1  \n",
       "\n",
       "[8069 rows x 27 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Critic_Count</th>\n",
       "      <th>Critic_Score</th>\n",
       "      <th>Global_Sales</th>\n",
       "      <th>User_Count</th>\n",
       "      <th>User_Score</th>\n",
       "      <th>Year_of_Release</th>\n",
       "      <th>Platform_3DS</th>\n",
       "      <th>Platform_PC</th>\n",
       "      <th>Platform_PS2</th>\n",
       "      <th>Platform_PS3</th>\n",
       "      <th>...</th>\n",
       "      <th>Platform_X360</th>\n",
       "      <th>Platform_XOne</th>\n",
       "      <th>Genre_Action</th>\n",
       "      <th>Genre_Adventure</th>\n",
       "      <th>Genre_Fighting</th>\n",
       "      <th>Genre_Misc</th>\n",
       "      <th>Genre_Racing</th>\n",
       "      <th>Genre_Role-Playing</th>\n",
       "      <th>Genre_Shooter</th>\n",
       "      <th>Genre_Sports</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>41.000000</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>28.92</td>\n",
       "      <td>129.00</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>63.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>22.70</td>\n",
       "      <td>146.00</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>21.81</td>\n",
       "      <td>106.00</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>21.79</td>\n",
       "      <td>52.00</td>\n",
       "      <td>7.4</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>97.000000</td>\n",
       "      <td>21.04</td>\n",
       "      <td>3994.00</td>\n",
       "      <td>8.2</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8064</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>0.01</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8065</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>0.01</td>\n",
       "      <td>8.00</td>\n",
       "      <td>5.8</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8066</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>0.01</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8067</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>0.01</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8068</th>\n",
       "      <td>26.360821</td>\n",
       "      <td>68.967679</td>\n",
       "      <td>0.01</td>\n",
       "      <td>162.22</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8069 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Critic_Count  Critic_Score  Global_Sales  User_Count  User_Score  \\\n",
       "0        41.000000     58.000000         28.92      129.00         6.6   \n",
       "1        63.000000     80.000000         22.70      146.00         7.7   \n",
       "2        45.000000     61.000000         21.81      106.00         6.3   \n",
       "3        33.000000     80.000000         21.79       52.00         7.4   \n",
       "4        50.000000     97.000000         21.04     3994.00         8.2   \n",
       "...            ...           ...           ...         ...         ...   \n",
       "8064     26.360821     68.967679          0.01      162.22         7.2   \n",
       "8065      6.000000     63.000000          0.01        8.00         5.8   \n",
       "8066     26.360821     68.967679          0.01      162.22         7.2   \n",
       "8067     26.360821     68.967679          0.01      162.22         7.2   \n",
       "8068     26.360821     68.967679          0.01      162.22         7.2   \n",
       "\n",
       "      Year_of_Release  Platform_3DS  Platform_PC  Platform_PS2  Platform_PS3  \\\n",
       "0              2006.0             0            0             0             0   \n",
       "1              2007.0             0            0             0             0   \n",
       "2              2010.0             0            0             0             0   \n",
       "3              2009.0             0            0             0             0   \n",
       "4              2013.0             0            0             0             1   \n",
       "...               ...           ...          ...           ...           ...   \n",
       "8064           2007.0             0            0             0             0   \n",
       "8065           2009.0             0            1             0             0   \n",
       "8066           2008.0             0            0             1             0   \n",
       "8067           2016.0             0            0             0             1   \n",
       "8068           2006.0             0            0             0             0   \n",
       "\n",
       "      ...  Platform_X360  Platform_XOne  Genre_Action  Genre_Adventure  \\\n",
       "0     ...              0              0             0                0   \n",
       "1     ...              0              0             0                0   \n",
       "2     ...              1              0             0                0   \n",
       "3     ...              0              0             0                0   \n",
       "4     ...              0              0             1                0   \n",
       "...   ...            ...            ...           ...              ...   \n",
       "8064  ...              0              0             0                0   \n",
       "8065  ...              0              0             0                1   \n",
       "8066  ...              0              0             0                0   \n",
       "8067  ...              0              0             1                0   \n",
       "8068  ...              1              0             0                0   \n",
       "\n",
       "      Genre_Fighting  Genre_Misc  Genre_Racing  Genre_Role-Playing  \\\n",
       "0                  0           1             0                   0   \n",
       "1                  0           0             0                   0   \n",
       "2                  0           1             0                   0   \n",
       "3                  0           0             0                   0   \n",
       "4                  0           0             0                   0   \n",
       "...              ...         ...           ...                 ...   \n",
       "8064               0           0             0                   1   \n",
       "8065               0           0             0                   0   \n",
       "8066               0           0             1                   0   \n",
       "8067               0           0             0                   0   \n",
       "8068               0           0             0                   0   \n",
       "\n",
       "      Genre_Shooter  Genre_Sports  \n",
       "0                 0             0  \n",
       "1                 0             1  \n",
       "2                 0             0  \n",
       "3                 0             1  \n",
       "4                 0             0  \n",
       "...             ...           ...  \n",
       "8064              0             0  \n",
       "8065              0             0  \n",
       "8066              0             0  \n",
       "8067              0             0  \n",
       "8068              0             1  \n",
       "\n",
       "[8069 rows x 23 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Final_Data = final_data.drop(['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'], axis=1)\n",
    "Final_Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Applying ML algorithms to final_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Critic_Count', 'Critic_Score', 'EU_Sales', 'Global_Sales', 'JP_Sales',\n",
       "       'NA_Sales', 'Other_Sales', 'User_Count', 'User_Score',\n",
       "       'Year_of_Release', 'Platform_3DS', 'Platform_PC', 'Platform_PS2',\n",
       "       'Platform_PS3', 'Platform_PS4', 'Platform_PSP', 'Platform_Wii',\n",
       "       'Platform_X360', 'Platform_XOne', 'Genre_Action', 'Genre_Adventure',\n",
       "       'Genre_Fighting', 'Genre_Misc', 'Genre_Racing', 'Genre_Role-Playing',\n",
       "       'Genre_Shooter', 'Genre_Sports'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8069, 26)\n",
      "      Critic_Count  Critic_Score  EU_Sales  JP_Sales   NA_Sales  Other_Sales  \\\n",
      "0        41.000000     58.000000  9.180000  2.930000  13.960000     2.840000   \n",
      "1        63.000000     80.000000  8.030000  3.600000   8.920000     2.150000   \n",
      "2        45.000000     61.000000  4.890000  0.240000  15.000000     1.690000   \n",
      "3        33.000000     80.000000  8.490000  2.530000   9.010000     1.770000   \n",
      "4        50.000000     97.000000  9.090000  0.980000   7.020000     3.960000   \n",
      "...            ...           ...       ...       ...        ...          ...   \n",
      "8064     26.360821     68.967679  1.559814  0.010000   0.000000     0.000000   \n",
      "8065      6.000000     63.000000  0.010000  4.660902   0.000000     0.395562   \n",
      "8066     26.360821     68.967679  0.000000  1.923000   1.906700     0.000000   \n",
      "8067     26.360821     68.967679  3.483549  0.010000   0.000000     0.000000   \n",
      "8068     26.360821     68.967679  0.010000  3.266886   0.855346     0.000000   \n",
      "\n",
      "      User_Count  User_Score  Year_of_Release  Platform_3DS  ...  \\\n",
      "0         129.00         6.6           2006.0             0  ...   \n",
      "1         146.00         7.7           2007.0             0  ...   \n",
      "2         106.00         6.3           2010.0             0  ...   \n",
      "3          52.00         7.4           2009.0             0  ...   \n",
      "4        3994.00         8.2           2013.0             0  ...   \n",
      "...          ...         ...              ...           ...  ...   \n",
      "8064      162.22         7.2           2007.0             0  ...   \n",
      "8065        8.00         5.8           2009.0             0  ...   \n",
      "8066      162.22         7.2           2008.0             0  ...   \n",
      "8067      162.22         7.2           2016.0             0  ...   \n",
      "8068      162.22         7.2           2006.0             0  ...   \n",
      "\n",
      "      Platform_X360  Platform_XOne  Genre_Action  Genre_Adventure  \\\n",
      "0                 0              0             0                0   \n",
      "1                 0              0             0                0   \n",
      "2                 1              0             0                0   \n",
      "3                 0              0             0                0   \n",
      "4                 0              0             1                0   \n",
      "...             ...            ...           ...              ...   \n",
      "8064              0              0             0                0   \n",
      "8065              0              0             0                1   \n",
      "8066              0              0             0                0   \n",
      "8067              0              0             1                0   \n",
      "8068              1              0             0                0   \n",
      "\n",
      "      Genre_Fighting  Genre_Misc  Genre_Racing  Genre_Role-Playing  \\\n",
      "0                  0           1             0                   0   \n",
      "1                  0           0             0                   0   \n",
      "2                  0           1             0                   0   \n",
      "3                  0           0             0                   0   \n",
      "4                  0           0             0                   0   \n",
      "...              ...         ...           ...                 ...   \n",
      "8064               0           0             0                   1   \n",
      "8065               0           0             0                   0   \n",
      "8066               0           0             1                   0   \n",
      "8067               0           0             0                   0   \n",
      "8068               0           0             0                   0   \n",
      "\n",
      "      Genre_Shooter  Genre_Sports  \n",
      "0                 0             0  \n",
      "1                 0             1  \n",
      "2                 0             0  \n",
      "3                 0             1  \n",
      "4                 0             0  \n",
      "...             ...           ...  \n",
      "8064              0             0  \n",
      "8065              0             0  \n",
      "8066              0             0  \n",
      "8067              0             0  \n",
      "8068              0             1  \n",
      "\n",
      "[8069 rows x 26 columns]\n",
      "(8069, 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Global_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>28.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8064</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8065</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8066</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8067</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8068</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8069 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Global_Sales\n",
       "0            28.92\n",
       "1            22.70\n",
       "2            21.81\n",
       "3            21.79\n",
       "4            21.04\n",
       "...            ...\n",
       "8064          0.01\n",
       "8065          0.01\n",
       "8066          0.01\n",
       "8067          0.01\n",
       "8068          0.01\n",
       "\n",
       "[8069 rows x 1 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X1 = final_data[['Critic_Count', 'Critic_Score', 'EU_Sales', 'JP_Sales',\n",
    "       'NA_Sales', 'Other_Sales', 'User_Count', 'User_Score',\n",
    "       'Year_of_Release', 'Platform_3DS', 'Platform_PC', 'Platform_PS2',\n",
    "       'Platform_PS3', 'Platform_PS4', 'Platform_PSP', 'Platform_Wii',\n",
    "       'Platform_X360', 'Platform_XOne', 'Genre_Action', 'Genre_Adventure',\n",
    "       'Genre_Fighting', 'Genre_Misc', 'Genre_Racing', 'Genre_Role-Playing',\n",
    "       'Genre_Shooter', 'Genre_Sports']]\n",
    "\n",
    "Y1 = final_data[['Global_Sales']]\n",
    "\n",
    "print(X1.shape)\n",
    "print(X1)\n",
    "print(Y1.shape)\n",
    "Y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (6051, 26)\n",
      "Y_train shape: (6051, 1)\n",
      "X_test shape: (2018, 26)\n",
      "Y_test shape: (2018, 1)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X1_train, X1_test, Y1_train, Y1_test = train_test_split(X1, Y1, random_state=42)\n",
    "\n",
    "#Let's check the shape of the split data as a precaution\n",
    "print(\"X_train shape: {}\".format(X1_train.shape))\n",
    "print(\"Y_train shape: {}\".format(Y1_train.shape))\n",
    "\n",
    "print(\"X_test shape: {}\".format(X1_test.shape))\n",
    "print(\"Y_test shape: {}\".format(Y1_test.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\n",
    "Y1_train = np.log1p(Y1_train)\n",
    "Y1_test = np.log1p(Y1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " mu = 0.33 and sigma = 0.41\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Y1_log_transformed = np.log1p(data['Global_Sales']) #For comparison to earlier, here's the whole Y transformed\n",
    "sns.distplot(Y1_log_transformed , fit=norm);\n",
    "\n",
    "# Get the fitted parameters used by the function\n",
    "(mu, sigma) = norm.fit(Y1_log_transformed)\n",
    "print( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n",
    "\n",
    "#Now plot the distribution\n",
    "plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n",
    "            loc='best')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Global_Sales distribution')\n",
    "\n",
    "#Get also the QQ-plot\n",
    "fig = plt.figure()\n",
    "res = stats.probplot(Y1_log_transformed, plot=plt)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "scaler.fit(X1_train)\n",
    "\n",
    "X1_train_scaled = scaler.transform(X1_train) \n",
    "X1_test_scaled = scaler.transform(X1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#No grid to define for vanilla linear regression\n",
    "param_grid_lr = [\n",
    "    {}\n",
    "]\n",
    "\n",
    "#Parameter grid for lasso\n",
    "param_grid_lasso = [\n",
    "    {'alpha': [10, 1, 0.1, 0.01, 0.001, 0.0001], 'max_iter': [1000000, 100000, 10000, 1000]}\n",
    "]\n",
    "\n",
    "#Parameter grid for Ridge Regression\n",
    "param_grid_rr = [\n",
    "    {'alpha': [100, 10, 1, 0.1, 0.01, 0.001]}\n",
    "]\n",
    "\n",
    "#Parameter grid for Support Vector Regressor\n",
    "param_grid_svr = [\n",
    "    {'C': [0.01, 0.1, 1, 10], 'gamma': [0.0001, 0.001, 0.01, 0.1, 1],\n",
    "     'kernel': ['rbf']}\n",
    "]\n",
    "\n",
    "#Parameter grid for Random Forest\n",
    "param_grid_rf = [\n",
    "    {'n_estimators': [3, 10, 30, 50, 70], 'max_features': [2,4,6,8,10,12], 'max_depth': [2, 3, 5, 7, 9]}\n",
    "]\n",
    "\n",
    "#Parameter grid for Gradient Boosting Regressor\n",
    "param_grid_gbr = [\n",
    "    {'n_estimators': [200, 225, 250, 275], 'max_features': [6, 8, 10, 12], 'max_depth': [5, 7, 9]}\n",
    "]\n",
    "\n",
    "#Parameter grid for MLPRegressor. \n",
    "#Current set of hyperparameters are the result of grid search that took forever.\n",
    "param_grid_mlpr = [\n",
    "    {'hidden_layer_sizes': [(10,5)], 'solver': ['lbfgs'], 'batch_size': [200],\n",
    "     'learning_rate': ['adaptive'], 'max_iter': [6000], 'verbose': [True], \n",
    "     'nesterovs_momentum': [True], 'early_stopping': [True], 'validation_fraction': [0.12],\n",
    "     'random_state': [100], 'alpha': [0.1], 'activation': ['logistic']}\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Applying Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {}\n",
      "Best cross-validation score: 0.34\n",
      "Test set score: 0.35\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "grid_search_lr = GridSearchCV(LinearRegression(), param_grid_lr, scoring='neg_mean_squared_error',  cv=5)\n",
    "grid_search_lr.fit(X1_train, Y1_train)\n",
    "print(\"Best parameters: {}\".format(grid_search_lr.best_params_))\n",
    "lr_best_cross_val_score = (np.sqrt(-grid_search_lr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(lr_best_cross_val_score)))\n",
    "lr_score = np.sqrt(-grid_search_lr.score(X1_test, Y1_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(lr_score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'alpha': 0.0001, 'max_iter': 1000000}\n",
      "Best cross-validation score: 0.34\n",
      "Test set score: 0.35\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "grid_search_lasso = GridSearchCV(Lasso(), param_grid_lasso, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_lasso.fit(X1_train, Y1_train)\n",
    "print(\"Best parameters: {}\".format(grid_search_lasso.best_params_))\n",
    "lasso_best_cross_val_score = (np.sqrt(-grid_search_lasso.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(lasso_best_cross_val_score)))\n",
    "lasso_score = np.sqrt(-grid_search_lasso.score(X1_test, Y1_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(lasso_score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'alpha': 10}\n",
      "Best cross-validation score: 0.34\n",
      "Test set score: 0.35\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "\n",
    "grid_search_rr = GridSearchCV(Ridge(), param_grid_rr, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_rr.fit(X1_train, Y1_train)\n",
    "print(\"Best parameters: {}\".format(grid_search_rr.best_params_))\n",
    "rr_best_cross_val_score = (np.sqrt(-grid_search_rr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(rr_best_cross_val_score)))\n",
    "rr_score = np.sqrt(-grid_search_rr.score(X1_test, Y1_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(rr_score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "Best cross-validation score: 0.36\n",
      "Test set score: 0.36\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVR\n",
    "\n",
    "grid_search_svr = GridSearchCV(SVR(), param_grid_svr, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_svr.fit(X1_train, Y1_train.values.ravel())\n",
    "print(\"Best parameters: {}\".format(grid_search_svr.best_params_))\n",
    "svr_best_cross_val_score = (np.sqrt(-grid_search_svr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(svr_best_cross_val_score)))\n",
    "svr_score = np.sqrt(-grid_search_svr.score(X1_test, Y1_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(svr_score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'max_depth': 9, 'max_features': 12, 'n_estimators': 50}\n",
      "Best cross-validation score: 0.11\n",
      "Test set score: 0.11\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "grid_search_rf = GridSearchCV(RandomForestRegressor(), param_grid_rf, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_rf.fit(X1_train, Y1_train.values.ravel())\n",
    "print(\"Best parameters: {}\".format(grid_search_rf.best_params_))\n",
    "rf_best_cross_val_score = (np.sqrt(-grid_search_rf.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(rf_best_cross_val_score)))\n",
    "rf_score = np.sqrt(-grid_search_rf.score(X1_test, Y1_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(rf_score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'max_depth': 9, 'max_features': 12, 'n_estimators': 275}\n",
      "Best cross-validation score: 0.10\n",
      "Test set score: 0.10\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "grid_search_gbr = GridSearchCV(GradientBoostingRegressor(), param_grid_gbr, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_gbr.fit(X1_train, Y1_train.values.ravel())\n",
    "print(\"Best parameters: {}\".format(grid_search_gbr.best_params_))\n",
    "gbr_best_cross_val_score = (np.sqrt(-grid_search_gbr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(gbr_best_cross_val_score)))\n",
    "gbr_score = np.sqrt(-grid_search_gbr.score(X1_test, Y1_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(gbr_score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'activation': 'logistic', 'alpha': 0.1, 'batch_size': 200, 'early_stopping': True, 'hidden_layer_sizes': (10, 5), 'learning_rate': 'adaptive', 'max_iter': 6000, 'nesterovs_momentum': True, 'random_state': 100, 'solver': 'lbfgs', 'validation_fraction': 0.12, 'verbose': True}\n",
      "Best cross-validation score: 0.31\n",
      "Test set score: 0.32\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPRegressor\n",
    "\n",
    "grid_search_mlpr = GridSearchCV(MLPRegressor(), param_grid_mlpr, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_mlpr.fit(X1_train, Y1_train.values.ravel())\n",
    "print(\"Best parameters: {}\".format(grid_search_mlpr.best_params_))\n",
    "mlpr_best_cross_val_score = (np.sqrt(-grid_search_mlpr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(mlpr_best_cross_val_score)))\n",
    "mlpr_score = np.sqrt(-grid_search_mlpr.score(X1_test, Y1_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(mlpr_score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot feature importance\n",
    "feature_importance = grid_search_gbr.best_estimator_.feature_importances_\n",
    "# make importances relative to max importance\n",
    "feature_importance = 100.0 * (feature_importance / feature_importance.max())\n",
    "sorted_idx = np.argsort(feature_importance)\n",
    "pos = np.arange(sorted_idx.shape[0]) + .5\n",
    "plt.figure(figsize=(20,10))\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.barh(pos, feature_importance[sorted_idx], align='center')\n",
    "plt.yticks(pos, X1_train.columns.values[sorted_idx]) #Not 100 % sure the feature names match the importances correctly...\n",
    "plt.xlabel('Relative Importance')\n",
    "plt.title('Variable Importance')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Applying ML algorithms to Final_Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8069, 22)\n",
      "      Critic_Count  Critic_Score  User_Count  User_Score  Year_of_Release  \\\n",
      "0        41.000000     58.000000      129.00         6.6           2006.0   \n",
      "1        63.000000     80.000000      146.00         7.7           2007.0   \n",
      "2        45.000000     61.000000      106.00         6.3           2010.0   \n",
      "3        33.000000     80.000000       52.00         7.4           2009.0   \n",
      "4        50.000000     97.000000     3994.00         8.2           2013.0   \n",
      "...            ...           ...         ...         ...              ...   \n",
      "8064     26.360821     68.967679      162.22         7.2           2007.0   \n",
      "8065      6.000000     63.000000        8.00         5.8           2009.0   \n",
      "8066     26.360821     68.967679      162.22         7.2           2008.0   \n",
      "8067     26.360821     68.967679      162.22         7.2           2016.0   \n",
      "8068     26.360821     68.967679      162.22         7.2           2006.0   \n",
      "\n",
      "      Platform_3DS  Platform_PC  Platform_PS2  Platform_PS3  Platform_PS4  \\\n",
      "0                0            0             0             0             0   \n",
      "1                0            0             0             0             0   \n",
      "2                0            0             0             0             0   \n",
      "3                0            0             0             0             0   \n",
      "4                0            0             0             1             0   \n",
      "...            ...          ...           ...           ...           ...   \n",
      "8064             0            0             0             0             0   \n",
      "8065             0            1             0             0             0   \n",
      "8066             0            0             1             0             0   \n",
      "8067             0            0             0             1             0   \n",
      "8068             0            0             0             0             0   \n",
      "\n",
      "      ...  Platform_X360  Platform_XOne  Genre_Action  Genre_Adventure  \\\n",
      "0     ...              0              0             0                0   \n",
      "1     ...              0              0             0                0   \n",
      "2     ...              1              0             0                0   \n",
      "3     ...              0              0             0                0   \n",
      "4     ...              0              0             1                0   \n",
      "...   ...            ...            ...           ...              ...   \n",
      "8064  ...              0              0             0                0   \n",
      "8065  ...              0              0             0                1   \n",
      "8066  ...              0              0             0                0   \n",
      "8067  ...              0              0             1                0   \n",
      "8068  ...              1              0             0                0   \n",
      "\n",
      "      Genre_Fighting  Genre_Misc  Genre_Racing  Genre_Role-Playing  \\\n",
      "0                  0           1             0                   0   \n",
      "1                  0           0             0                   0   \n",
      "2                  0           1             0                   0   \n",
      "3                  0           0             0                   0   \n",
      "4                  0           0             0                   0   \n",
      "...              ...         ...           ...                 ...   \n",
      "8064               0           0             0                   1   \n",
      "8065               0           0             0                   0   \n",
      "8066               0           0             1                   0   \n",
      "8067               0           0             0                   0   \n",
      "8068               0           0             0                   0   \n",
      "\n",
      "      Genre_Shooter  Genre_Sports  \n",
      "0                 0             0  \n",
      "1                 0             1  \n",
      "2                 0             0  \n",
      "3                 0             1  \n",
      "4                 0             0  \n",
      "...             ...           ...  \n",
      "8064              0             0  \n",
      "8065              0             0  \n",
      "8066              0             0  \n",
      "8067              0             0  \n",
      "8068              0             1  \n",
      "\n",
      "[8069 rows x 22 columns]\n",
      "(8069, 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Global_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>28.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8064</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8065</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8066</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8067</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8068</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8069 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Global_Sales\n",
       "0            28.92\n",
       "1            22.70\n",
       "2            21.81\n",
       "3            21.79\n",
       "4            21.04\n",
       "...            ...\n",
       "8064          0.01\n",
       "8065          0.01\n",
       "8066          0.01\n",
       "8067          0.01\n",
       "8068          0.01\n",
       "\n",
       "[8069 rows x 1 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = Final_Data[['Critic_Count', 'Critic_Score', 'User_Count', 'User_Score',\n",
    "       'Year_of_Release', 'Platform_3DS', 'Platform_PC', 'Platform_PS2',\n",
    "       'Platform_PS3', 'Platform_PS4', 'Platform_PSP', 'Platform_Wii',\n",
    "       'Platform_X360', 'Platform_XOne', 'Genre_Action', 'Genre_Adventure',\n",
    "       'Genre_Fighting', 'Genre_Misc', 'Genre_Racing', 'Genre_Role-Playing',\n",
    "       'Genre_Shooter', 'Genre_Sports']]\n",
    "\n",
    "Y = Final_Data[['Global_Sales']]\n",
    "\n",
    "print(X.shape)\n",
    "print(X)\n",
    "print(Y.shape)\n",
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (6051, 22)\n",
      "Y_train shape: (6051, 1)\n",
      "X_test shape: (2018, 22)\n",
      "Y_test shape: (2018, 1)\n"
     ]
    }
   ],
   "source": [
    "# from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=42)\n",
    "\n",
    "#Let's check the shape of the split data as a precaution\n",
    "print(\"X_train shape: {}\".format(X_train.shape))\n",
    "print(\"Y_train shape: {}\".format(Y_train.shape))\n",
    "\n",
    "print(\"X_test shape: {}\".format(X_test.shape))\n",
    "print(\"Y_test shape: {}\".format(Y_test.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\n",
    "Y_train = np.log1p(Y_train)\n",
    "Y_test = np.log1p(Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " mu = 0.33 and sigma = 0.41\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Check the new distribution \n",
    "Y_log_transformed = np.log1p(data['Global_Sales']) #For comparison to earlier, here's the whole Y transformed\n",
    "sns.distplot(Y_log_transformed , fit=norm);\n",
    "\n",
    "# Get the fitted parameters used by the function\n",
    "(mu, sigma) = norm.fit(Y_log_transformed)\n",
    "print( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n",
    "\n",
    "#Now plot the distribution\n",
    "plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n",
    "            loc='best')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Global_Sales distribution')\n",
    "\n",
    "#Get also the QQ-plot\n",
    "fig = plt.figure()\n",
    "res = stats.probplot(Y_log_transformed, plot=plt)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scaling the features in train and test data\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "scaler.fit(X_train)\n",
    "\n",
    "X_train_scaled = scaler.transform(X_train) \n",
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying Multiple Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {}\n",
      "Best cross-validation score: 0.39\n",
      "Test set score: 0.41\n"
     ]
    }
   ],
   "source": [
    "grid_search_lr = GridSearchCV(LinearRegression(), param_grid_lr, scoring='neg_mean_squared_error',  cv=5)\n",
    "grid_search_lr.fit(X_train, Y_train)\n",
    "print(\"Best parameters: {}\".format(grid_search_lr.best_params_))\n",
    "lr_best_cross_val_score = (np.sqrt(-grid_search_lr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(lr_best_cross_val_score)))\n",
    "lr_score = np.sqrt(-grid_search_lr.score(X_test, Y_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(lr_score)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'alpha': 0.0001, 'max_iter': 1000000}\n",
      "Best cross-validation score: 0.34\n",
      "Test set score: 0.35\n"
     ]
    }
   ],
   "source": [
    "grid_search_lasso = GridSearchCV(Lasso(), param_grid_lasso, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_lasso.fit(X1_train, Y1_train)\n",
    "print(\"Best parameters: {}\".format(grid_search_lasso.best_params_))\n",
    "lasso_best_cross_val_score = (np.sqrt(-grid_search_lasso.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(lasso_best_cross_val_score)))\n",
    "lasso_score = np.sqrt(-grid_search_lasso.score(X1_test, Y1_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(lasso_score)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'alpha': 10}\n",
      "Best cross-validation score: 0.39\n",
      "Test set score: 0.41\n"
     ]
    }
   ],
   "source": [
    "grid_search_rr = GridSearchCV(Ridge(), param_grid_rr, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_rr.fit(X_train, Y_train)\n",
    "print(\"Best parameters: {}\".format(grid_search_rr.best_params_))\n",
    "rr_best_cross_val_score = (np.sqrt(-grid_search_rr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(rr_best_cross_val_score)))\n",
    "rr_score = np.sqrt(-grid_search_rr.score(X_test, Y_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(rr_score)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying SVR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'C': 1, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "Best cross-validation score: 0.39\n",
      "Test set score: 0.42\n"
     ]
    }
   ],
   "source": [
    "grid_search_svr = GridSearchCV(SVR(), param_grid_svr, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_svr.fit(X_train, Y_train.values.ravel())\n",
    "print(\"Best parameters: {}\".format(grid_search_svr.best_params_))\n",
    "svr_best_cross_val_score = (np.sqrt(-grid_search_svr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(svr_best_cross_val_score)))\n",
    "svr_score = np.sqrt(-grid_search_svr.score(X_test, Y_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(svr_score)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying Random Forest Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'max_depth': 9, 'max_features': 10, 'n_estimators': 30}\n",
      "Best cross-validation score: 0.33\n",
      "Test set score: 0.34\n"
     ]
    }
   ],
   "source": [
    "grid_search_rf = GridSearchCV(RandomForestRegressor(), param_grid_rf, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_rf.fit(X_train, Y_train.values.ravel())\n",
    "print(\"Best parameters: {}\".format(grid_search_rf.best_params_))\n",
    "rf_best_cross_val_score = (np.sqrt(-grid_search_rf.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(rf_best_cross_val_score)))\n",
    "rf_score = np.sqrt(-grid_search_rf.score(X_test, Y_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(rf_score)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying Graident Boosting Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'max_depth': 5, 'max_features': 6, 'n_estimators': 275}\n",
      "Best cross-validation score: 0.32\n",
      "Test set score: 0.32\n"
     ]
    }
   ],
   "source": [
    "grid_search_gbr = GridSearchCV(GradientBoostingRegressor(), param_grid_gbr, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_gbr.fit(X_train, Y_train.values.ravel())\n",
    "print(\"Best parameters: {}\".format(grid_search_gbr.best_params_))\n",
    "gbr_best_cross_val_score = (np.sqrt(-grid_search_gbr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(gbr_best_cross_val_score)))\n",
    "gbr_score = np.sqrt(-grid_search_gbr.score(X_test, Y_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(gbr_score)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying MLP Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'activation': 'logistic', 'alpha': 0.1, 'batch_size': 200, 'early_stopping': True, 'hidden_layer_sizes': (10, 5), 'learning_rate': 'adaptive', 'max_iter': 6000, 'nesterovs_momentum': True, 'random_state': 100, 'solver': 'lbfgs', 'validation_fraction': 0.12, 'verbose': True}\n",
      "Best cross-validation score: 0.36\n",
      "Test set score: 0.38\n"
     ]
    }
   ],
   "source": [
    "grid_search_mlpr = GridSearchCV(MLPRegressor(), param_grid_mlpr, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search_mlpr.fit(X_train, Y_train.values.ravel())\n",
    "print(\"Best parameters: {}\".format(grid_search_mlpr.best_params_))\n",
    "mlpr_best_cross_val_score = (np.sqrt(-grid_search_mlpr.best_score_))\n",
    "print(\"Best cross-validation score: {:.2f}\".format(np.expm1(mlpr_best_cross_val_score)))\n",
    "mlpr_score = np.sqrt(-grid_search_mlpr.score(X_test, Y_test))\n",
    "print(\"Test set score: {:.2f}\".format(np.expm1(mlpr_score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot feature importance\n",
    "feature_importance = grid_search_gbr.best_estimator_.feature_importances_\n",
    "# make importances relative to max importance\n",
    "feature_importance = 100.0 * (feature_importance / feature_importance.max())\n",
    "sorted_idx = np.argsort(feature_importance)\n",
    "pos = np.arange(sorted_idx.shape[0]) + .5\n",
    "plt.figure(figsize=(20,10))\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.barh(pos, feature_importance[sorted_idx], align='center')\n",
    "plt.yticks(pos, X_train.columns.values[sorted_idx]) #Not 100 % sure the feature names match the importances correctly...\n",
    "plt.xlabel('Relative Importance')\n",
    "plt.title('Variable Importance')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
